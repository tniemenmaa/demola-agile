<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MFiles.VAF</name>
    </assembly>
    <members>
        <member name="T:MFiles.VAF.AssemblyVersionCompatibilityResolver">
            <summary>
            A static class with pre-defined name that contains the assembly version compatibility checking method.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyVersionCompatibilityResolver.IsAssemblyVersionCompatible(System.Reflection.AssemblyName)">
            <summary>
            Checks whether the given assebly version is compatible with the current version.
            </summary>
            <param name="other">The other assembly's assembly name.</param>
            <returns>True if the assemblies are compatible.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ApplicationDefinition">
            <summary>
            ApplicationDefinition is a class that provides the application basic information read from the appdef.xml which
            is associated with the application.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.instance">
            <summary>
            The single instance of this object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.data">
            <summary>
            The application definition data content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.#ctor">
            <summary>
            The only and private constructor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Instance">
            <summary>
            The singleton object data access.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Guid">
            <summary>
            The application's GUID. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.MasterApplicationGuid">
            <summary>
            The master application's GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Name">
            <summary>
            The application's name. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Description">
            <summary>
            The application's description.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Publisher">
            <summary>
            The application's publisher information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Copyright">
            <summary>
            The application's copyright text.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Version">
            <summary>
            The application's version. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.RequiredMFilesVersion">
            <summary>
            The required M-Files version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.EventHandlerExtensionObjectName">
            <summary>
            The name of the application's extension object that is responsible of the event handling and dispatching.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData">
            <summary>
            The internal data representation in appdef.xml.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.#ctor">
            <summary>
            Default constructor needed by the serialization.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.GetSchema">
            <summary>
            Method for returning the schema. Documentation says that this needs to return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ReadXml(System.Xml.XmlReader)">
            <summary>
            ReadXML deserializes the class using the given XmlReader.
            </summary>
            <param name="reader">The XML stream to deserialize from.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Method for serializing the class. Not implemented.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Guid">
            <summary>
            The application's GUID. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.MasterApplicationGuid">
            <summary>
            The master application's GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Name">
            <summary>
            The application's name. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Description">
            <summary>
            The application's description.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Publisher">
            <summary>
            The application's publisher information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Copyright">
            <summary>
            The application's copyright text.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Version">
            <summary>
            The application's version. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.RequiredMFilesVersion">
            <summary>
            The required M-Files version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.EventHandlerExtensionObjectName">
            <summary>
            The name of the application's extension object that is responsible of the event handling and dispatching.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames">
            <summary>
            appdef.xml element names from which the data is read.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Root">
            <summary>
            The root element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Name">
            <summary>
            The name element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Version">
            <summary>
            The version element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Guid">
            <summary>
            The guid element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.MasterApplicationGuid">
            <summary>
            The master application guid element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Description">
            <summary>
            The description element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Publisher">
            <summary>
            The publisher element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Copyright">
            <summary>
            The copyright element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.RequiredMFilesVersion">
            <summary>
            The required M-Files version element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.ExtensionObjects">
            <summary>
            The extension objects element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.ExtensionObject">
            <summary>
            The extension object element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.ExtensionObjectName">
            <summary>
            The extension object name element name.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.AutoTempFile">
            <summary>
            A class to create and hold the ownership of a temporary file. The temporary file is deleted when the class instance
            is disposed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.AutoTempFile.Empty">
            <summary>
            The single empty instance.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Create(System.String)">
            <summary>
            Creates a automatically controlled temporary file.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>The new automatically controlled temporary file.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Attach(System.String)">
            <summary>
            Attaches and takes ownership of an existing temporary file.
            </summary>
            <param name="path">A path to the file.</param>
            <returns>The new automatically controlled temporary file.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Detach">
            <summary>
            Detaches the temporary file from the object, so that the object doesn't control the file any longer.
            The caller receives the ownership of the file.
            </summary>
            <returns>The path to the file.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Dispose">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Dispose(System.Boolean)">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFile.IsValid">
            <summary>
            Resolves if the object encapsulates a controlled file path.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFile.Path">
            <summary>
            The controlled temporary folder.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.AutoTempFolder">
            <summary>
            A class to create and hold the ownership of a temporary folder. The temporary folder is deleted when the class instance
            is disposed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.AutoTempFolder.Empty">
            <summary>
            The single empty instance.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.#ctor">
            <summary>
            Constructor, creates an invalid object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Create">
            <summary>
            Creates a automatically controlled temporary folder. 
            </summary>
            <returns>The new automatically controlled temporary folder object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Attach(System.String)">
            <summary>
            Attaches and takes ownership of an existing temporary folder.
            </summary>
            <param name="path">The path to the temporary folder.</param>
            <returns>The new automatically controlled temporary folder object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Detach">
            <summary>
            Detaches the temporary folder from the object, so that the object doesn't control the folder any longer.
            The caller receives the ownership of the folder.
            </summary>
            <returns>The path to the folder.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Dispose">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Dispose(System.Boolean)">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFolder.IsValid">
            <summary>
            Resolves if the object encapsulates a controlled folder path.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFolder.Path">
            <summary>
            The controlled temporary folder.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperationState">
            <summary>
            A type for the state of the background operation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationState.Idle">
            <summary>
            Waiting to be started.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationState.Waiting">
            <summary>
            Waiting for next run.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationState.Running">
            <summary>
            A run is ongoing.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperationStatus">
            <summary>
            The status of a background operation at one given moment.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.State">
            <summary>
            The status of the background operation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.Cancelled">
            <summary>
            Is the operation cancelled. A cancelled operation cannot be used and is waiting to be disposed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.Recurring">
            <summary>
            Is the operation recurring.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.Interval">
            <summary>
            The interval between runs, when the operation is recurring. Only available when the operation is recurring.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.PreviousRunStarted">
            <summary>
            The previous invocation time in UTC. Only available after the first run has started.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.RunOnceRequestCount">
            <summary>
            The amount of run once requests. The run once requests will be served immediately after the previous run finishes.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.PreviousRunFinished">
            <summary>
            The previous run finished time in UTC. Only available after the first run has finished.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.NextRunScheduled">
            <summary>
            The next run scheduled time in UTC. Only available in Waiting state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.RunCount">
            <summary>
            The number of finished runs since the creation of the background operation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationStatus.#ctor(MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            Creates a new background operation status.
            </summary>
            <param name="operation">The background operation to clone the status from.</param>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperation">
            <summary>
            A background operation, that can be used to run a method in a background task. The method can be run at given intervals. Runs only one method at a time. Will delay the next run, if previous run is still ongoing.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.#ctor(System.String,System.String,System.Threading.CancellationToken,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Creates a new background operation that runs the method in separate task.
            </summary>
            <param name="vaultName">The name of the vault where this background operation is running.</param>
            <param name="name">The name of the background operation.</param>
            <param name="cancellationToken">The cancellation token, that is used to cancel the running background operation.</param>
            <param name="method">The method to invoke. The background operation will be passed to the method.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunOnce">
            <summary>
            Runs the operation at once or immediately after the current run is finished.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunOnce(System.Int32)">
            <summary>
            Runs the operation at once or immediately after the current run is finished.
            </summary>
            <param name="maximumRunOnceRequests">The run once request will not be made, if there are already more than equal requests to the given maximum.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunAtIntervals(System.TimeSpan)">
            <summary>
            Begins running the operation at given intervals. If a run takes longer than the interval, the next run starts immediately after the previous run.
            </summary>
            <param name="interval">The interval between consecutive runs.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.StopRunningAtIntervals">
            <summary>
            Stops running the operation at intervals.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.Cancel(System.Boolean)">
            <summary>
            Cancels the operation. A cancelled operation cannot be used and is waiting to be disposed.
            </summary>
            <param name="waitUntilIdle">If true, also waits until the operation is idle.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.WaitUntilIdle(System.TimeSpan)">
            <summary>
            Waits for the the operation to stop running. Can only return, if the operation is not running at intervals.
            </summary>
            <param name="maximumWaitingTime"></param>
            <returns>False, if the maximum waiting time was reached.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.ChangeStatus(System.Action)">
            <summary>
            A method to change the status of the background operation.
            The provided status changing action is run inside a lock and the state will change accordingly.
            </summary>
            <param name="statusChangingAction">The action that changes the status. Will be run inside a lock.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.WorkerMethod">
            <summary>
            The worker method for the background operations. Should be run in a separate task.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.ContinueOperationAfterWaiting(System.Threading.Tasks.Task)">
            <summary>
            Continues the operation after waiting. Run in a separate task.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.TryChangeStateAndScheduleNextRun(MFiles.VAF.Common.BackgroundOperationState@)">
            <summary>
            Changes the state according to the operation status. The state might not change.
            </summary>
            <param name="nextState">The state after the change.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.GetNextStateAndScheduleNextRun">
            <summary>
            Returns the next state, where the operation should be transferred.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RenewRefreshTokenSource">
            <summary>
            Creates a new refresh token source, if one is required.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunOperation">
            <summary>
            Task method that runs the operation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.DisposeRefreshTokenSource">
            <summary>
            Ensures, that the operation is stopped. Should be called with lock(this).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.GetRemainingTime(System.DateTime)">
            <summary>
            Gets the remaining time before the next invocation. Should be called with lock(this).
            </summary>
            <returns>The timespan that should be slept, before the next invocation</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.StartTask(System.Action)">
            <summary>
            Starts the method in a background task.
            </summary>
            <param name="method">The method to start.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.OnOperationEvent(MFiles.VAF.Common.BackgroundOperation.OperationEventHandler,MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            A helper to trigger a background operation event.
            </summary>
            <param name="eventHandler">The event handler to trigger.</param>
            <param name="operation">The operation to pass to the event.</param>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Status">
            <summary>
            The status of the background operation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.VaultName">
            <summary>
            The name of the vault where this background operation is running.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.State">
            <summary>
            The state of the background operation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Name">
            <summary>
            The name of the background operation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Cancelled">
            <summary>
            Is the operation cancelled. A cancelled operation cannot be used and is waiting to be disposed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Recurring">
            <summary>
            Is the operation recurring.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Interval">
            <summary>
            The interval between runs, when the operation is recurring. Only available when the operation is recurring.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.PreviousRunStarted">
            <summary>
            The previous invocation time in UTC. Only available after the first run has started.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.RunOnceRequestCount">
            <summary>
            The amount of run once requests. The run once requests will be served immediately after the previous run finishes.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.PreviousRunFinished">
            <summary>
            The previous run finished time in UTC. Only available after the first run has finished.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.NextRunScheduled">
            <summary>
            The next run scheduled time in UTC. The next run scheduled time in UTC. Only available in Waiting state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.RunCount">
            <summary>
            The number of finished runs since the creation of the background operation.
            </summary>
        </member>
        <member name="E:MFiles.VAF.Common.BackgroundOperation.StatusChanged">
            <summary>
            The event that is triggered, when the status of the background operation has changed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperation.OperationEventHandler">
            <summary>
            An event handler, that takes a background operation.
            </summary>
            <param name="operation">The background operation.</param>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperationManager">
            <summary>
            A manager to keep track of running background operations and their cancellation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.#ctor(System.String)">
            <summary>
            Initializes new BackgroundOperationManager object.
            </summary>
            <param name="vaultName">The name of the vault in which the manager is running.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CancelAll">
            <summary>
            Cancels all background operations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CancelAllAndWaitForFinish(System.TimeSpan)">
            <summary>
            Sends the request for cancelling the background operations and waits for them to finish.
            </summary>
            <param name="maximumWaitingTime">The maximum waiting time.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.GetBackgroundOperations">
            <summary>
            Returns all created background operations, that have not been cancelled and finished.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.RunOnce(System.String,System.Action)">
            <summary>
            Runs the given action in a background task.
            </summary>
            <param name="name">The name for the background operation.</param>
            <param name="method">The method to run.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.RunOnce(System.String,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Runs the given action in a background task.
            </summary>
            <param name="name">The name for the background operation.</param>
            <param name="method">The method to run.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.StartRecurringBackgroundOperation(System.String,System.TimeSpan,System.Action)">
            <summary>
            Creates a new background operation and starts it. The background operation runs the given method at given intervals.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="interval">The target interval between method calls. If the method call takes longer than the interval, the method will be invoked immediately after the previous method call returns.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A started background operation.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.StartRecurringBackgroundOperation(System.String,System.TimeSpan,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Creates a new background operation and starts it. The background operation runs the given method at given intervals.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="interval">The target interval between method calls. If the method call takes longer than the interval, the method will be invoked immediately after the previous method call returns.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A started background operation.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CreateBackgroundOperation(System.String,System.Action)">
            <summary>
            Creates a new background operation. The background operations runs the given method at given intervals. Must be separately started.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A new background operation, that is not yet started.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CreateBackgroundOperation(System.String,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Creates a new background operation. The background operations runs the given method at given intervals. Must be separately started.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A new background operation, that is not yet started.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.OperationStatusChanged(MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            Is run when the status of an operation has changed.
            </summary>
            <param name="operation">The background operation.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.GetCancellationTokenForUninitialization">
            <summary>
            Returns a cancellation token, that gets cancelled, when the vault goes offline.
            </summary>
            <returns>The cancellation token for uninitialization.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.OnOperationEvent(MFiles.VAF.Common.BackgroundOperation.OperationEventHandler,MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            A helper to trigger a background operation event.
            </summary>
            <param name="eventHandler">The event handler to trigger.</param>
            <param name="operation">The operation to pass to the event.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CastAction(System.Action)">
            <summary>
            Casts an action without a parameter to an action with a background operation parameter.
            </summary>
            <param name="method">Action without a parameter.</param>
            <returns>Action with a background operation parameter.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.ZeroIfNegative(System.TimeSpan)">
            <summary>
            Helper to return TimeSpan.Zero, if negative.
            </summary>
            <param name="timeSpan">TimeSpan</param>
            <returns>TimeSpan.Zero or the given non-negative TimeSpan.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.Dispose">
            <summary>
            Force disposing.
            </summary>
        </member>
        <member name="E:MFiles.VAF.Common.BackgroundOperationManager.OperationStarting">
            <summary>
            Triggered when a background operation starts.
            </summary>
        </member>
        <member name="E:MFiles.VAF.Common.BackgroundOperationManager.OperationStopping">
            <summary>
            Triggered when a background operation stops.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperationManager.VaultName">
            <summary>
            The name of the vault in which the manager is running.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ObjIDEqualityComparer">
            <summary>
            Equality comparer for ObjID objects
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDEqualityComparer.Equals(MFilesAPI.ObjID,MFilesAPI.ObjID)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">ObjID 1</param>
            <param name="o2">ObjID 2</param>
            <returns>True if both the Type and ID are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDEqualityComparer.GetHashCode(MFilesAPI.ObjID)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerIDEqualityComparer">
            <summary>
            Equality comparer for ObjVers based only on ID (not version)
            Essentially compares thier underlying ObjID.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerIDEqualityComparer.Equals(MFilesAPI.ObjVer,MFilesAPI.ObjVer)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">ObjVer 1</param>
            <param name="o2">ObjVer 2</param>
            <returns>True if both the Type and ID are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerIDEqualityComparer.GetHashCode(MFilesAPI.ObjVer)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerEqualityComparer">
            <summary>
            Equality comparer for ObjVer objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEqualityComparer.Equals(MFilesAPI.ObjVer,MFilesAPI.ObjVer)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">ObjVer 1</param>
            <param name="o2">ObjVer 2</param>
            <returns>True if both the Type and ID are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEqualityComparer.GetHashCode(MFilesAPI.ObjVer)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.EqualityCompareOptions">
            <summary>
            Equality compare options.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.None">
            <summary>
            Versions in lookups and the order of lookups are meaningful.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.Default">
            <summary>
            Default values, versions in lookups are meaningful but the order is not.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.LookupIgnoreVersions">
            <summary>
            Ignore lookup versions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.LookupsIgnoreOrder">
            <summary>
            Ignore lookups order.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFConfigurationAttribute">
            <summary>
            Attribute for marking the configuration objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFConfigurationAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="configNamespace">The configuration storage namespace.</param>
            <param name="configKey">The configuration storage key.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFConfigurationAttribute.Load``1(MFilesAPI.Vault,``0,MFiles.VAF.IConfigurationStorage)">
            <summary>
            Loads the configuration from the configuration storage.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault object.</param>
            <param name="original">The (possibly prefilled) existing object that will be populated. Can be null in which case a new instance will be created.</param>
            <param name="storage">The configuration storage object.</param>
            <returns>The populated original or new object depending whether the original was given in the first place.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFConfigurationAttribute.ConfigNamespace">
            <summary>
            The configuration storage namespace.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFConfigurationAttribute.ConfigKey">
            <summary>
            The configuration storage key in the defined namespace.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IStateTransitionAttribute">
            <summary>
            Common interface for state handlers attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IStateTransitionAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateTransitionEnvironment)">
            <summary>
            MatchesEnvironment is a method that is used in evaluating the calling context against the provided filters.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.StateTransitionAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ScriptAttributeBase">
            <summary>
            Common VAF Attribute base class.
            If these attributes match a certain environment, the attached method will be executed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ScriptAttributeBase.objectTypeIdentifier">
            <summary>
            Internal MFIdentifier of the ObjectType.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ScriptAttributeBase.classIdentifier">
            <summary>
            Internal MFIdentifier version of the Class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ScriptAttributeBase.#ctor">
            <summary>
            Creates a new instance of this attribute.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ScriptAttributeBase.Priority">
            <summary>
            The event handling priority. The highest priority handlers receive the event first. Large number indicates a high priority. 0 is the default value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ScriptAttributeBase.ObjectType">
            <summary>
            The object type to which the method is bound.
            (All object types assumed if not specified.)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ScriptAttributeBase.Class">
            <summary>
            The objects of a specific class to which the method is bound.
            (All classes assumed if not specified.)
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StateTransitionAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateTransitionEnvironment)">
            <summary>
            MatchesEnvironment checks the method filters against the current event context and determines if the handler should be called.
            </summary>
            <param name="context">The state context object.</param>
            <returns>Returns true if the handler method should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StateTransitionAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateTransitionAlias">Alias of the state transition where the handler method decorated with this attribute should be attached to.</param>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionAttribute.StateTransition">
            <summary>
            The state transition identifier where the method containing this attribute should be attached.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.AutomaticStateTransitionTriggerAttribute">
            <summary>
            Attribute for marking the automatic state transition conditions evaluation handlers.
            Handler signature: delegate bool AutomaticStateTransitionTriggerMethod( StateEnvironment environment, out int nextState )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutomaticStateTransitionTriggerAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateTransitionAlias">Alias of the state transition where the automatic state transition trigger evaluation handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.LookupsExtensionMethods">
            <summary>
            Defines convenience methods for the Lookups interface.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.LookupsExtensionMethods.IsEqual(MFilesAPI.Lookups,MFilesAPI.Lookups,MFiles.VAF.Common.EqualityCompareOptions)">
            <summary>
            Determines if the passed lookups contains all the same items as this one.
            </summary>
            <param name="lookups">The source lookups object.</param>
            <param name="otherLookups">The lookups object to compare the source with.</param>
            <param name="options">The equality comparison options.</param>
            <returns>True if the source lookups object, and other lookups object have the same items.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupsExtensionMethods.Intersects(MFilesAPI.Lookups,MFilesAPI.Lookups)">
            <summary>
            Determines if the passed lookup has any items that are also in this one.
            Does not take into account the version information.
            </summary>
            <param name="lookups">The source lookups object.</param>
            <param name="otherLookups">The lookups object to compare the source with.</param>
            <returns>True if the source lookups object, has any items that are in the other lookups object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFFileHelper">
            <summary>
            Utility methods for file handling in M-Files.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.ObjectFilesToSourceFiles(MFilesAPI.Vault,MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Turns the object files of the passed ObjVerEx into a SourceFiles collection
            by downloading the files to a temporary location.
            </summary>
            <param name="vault">The vault in which the files reside.</param>
            <param name="objVerEx">The a reference to the object's whose files to download.</param>
            <returns>
             SourceObjectFiles object where the downloaded file locations 
             are set as the SourceFilePath of each source file.
             </returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.ObjectFilesToSourceFiles(MFilesAPI.Vault,MFilesAPI.ObjectVersion)">
            <summary>
            Turns the object files of the passed version into a SourceFiles collection
            by downloading the files to a temporary location.
            </summary>
            <param name="vault">The vault in which the files reside.</param>
            <param name="objectVersion">The object's whose files to download.</param>
            <returns>
             SourceObjectFiles object where the downloaded file locations 
             are set as the SourceFilePath of each source file.
             </returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.ObjectFilesToSourceFiles(MFilesAPI.Vault,MFilesAPI.ObjectFiles)">
            <summary>
            Turns an ObjectFiles collection into a SourceFiles collection
            by downloading the files to a temporary location.
            </summary>
            <param name="vault">The vault in which the files resides.</param>
            <param name="files">The list of files to download.</param>
            <returns>
             SourceObjectFiles object where the downloaded file locations 
             are set as the SourceFilePath of each source file. The caller is responsible in deleting the files.
             </returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.DeleteSourceFiles(MFilesAPI.SourceObjectFiles)">
            <summary>
            Deletes all source files in a source file collection.
            </summary>
            <param name="sourceFiles">The SourceObjectFiles object whose source files should be deleted.</param>
        </member>
        <member name="T:MFiles.VAF.Common.MFIdentifier">
            <summary>
            Identification object type, that can be set to string and int.
            Implicit conversion to integer, explicit to alias string.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.alias">
            <summary>
            Internal field of Alias string.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.originalID">
            <summary>
            Internal version of original ID value, not the resolved one.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.Equals(MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Equality of two MFIdentifiers.
            For resolved identifiers, type and ID must match.
            If either one is unresolved, aliases or original ids must match.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.Equals(System.Object)">
            <summary>
            Equality with any other object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.GetHashCode">
            <summary>
            Get Hash Code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.ShouldSerializeAlias">
            <summary>
            Method deciding should we include Alias into serialization output.
            Yes when we have an alias.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.ShouldSerializeID">
            <summary>
            Method deciding should we include ID into serialization output.
            Yes only when we dont have an alias.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.resolvedOnce">
            <summary>
            Additional internal flag for Resolved state.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier._Resolve(MFilesAPI.Vault)">
            <summary>
            Internal resolving method.
            </summary>
            <param name="vault">The vault where to resolve.</param>
            <returns>true if handled, false is nothing done.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.Resolve(MFilesAPI.Vault,System.Type,System.Boolean)">
            <summary>
            Update this MFIdentifier to contain resolved ID of the alias, if it is not already resolved.
            Returns itself to allow command chaining.
            </summary>
            <param name="vault">The vault where to resolve.</param>
            <param name="targetType">Type of the object</param>
            <param name="forceRefresh">Forces re-resolution if the identifier has already been resolved.</param>
            <returns>this MFIdentifier</returns>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.type">
            <summary>
            Last used target type.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.SetAs">
            <summary>
            Internal information keeping track which type of value was set into this identifier.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.#ctor(System.Object)">
            <summary>
            Constructor to unknown anytype object.
            </summary>
            <param name="source">Source data object of many type.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.#ctor(System.Int32)">
            <summary>
            Constructor with known integer ID value.
            </summary>
            <param name="id">Known ID value.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.#ctor(System.String)">
            <summary>
            Constructor with known string value.
            </summary>
            <param name="str">Known alias string.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.op_Implicit(MFiles.VAF.Common.MFIdentifier)~System.Int32">
            <summary>
            Implicit conversion to int identifier, allowing direct use inplace of int.
            </summary>
            <param name="identifier"></param>
            <returns>ID</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.op_Explicit(MFiles.VAF.Common.MFIdentifier)~System.String">
            <summary>
            Original value string value can be got by explicit request.
            Allowing conversion and assignment into string.
            <c>string s = (string)SomeIdent;</c>
            If only ID number available, returns it as a string.
            </summary>
            <param name="identifier"></param>
            <returns>alias</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.Set(System.Object)">
            <summary>
            Helper function able to set the identifier value to almost any object type.
            Accepts MFIdentifier, string, int, enum, and other that cast to string.
            Returns itself to allow command chaining.
            </summary>
            <remarks>Note that using with integer like object will clear the alias, unlike setting the .ID directly.</remarks>
            <param name="anyObject">Source of any type.</param>
            <returns>this</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.SetStr(System.String)">
            <summary>
            Set the value to string value, handles also string containing integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.SetInt(System.Int32)">
            <summary>
            Set the value to interger ID.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.ToString">
            <summary>
            Returns this instance of Alias value, if not avail, returns string of ID.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.op_Implicit(System.String)~MFiles.VAF.Common.MFIdentifier">
            <summary>
            Implicit conversion of string to MFIdentifier.
            Allowing: <c>MFIdentifier x = "string";</c>
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.op_Implicit(System.Int32)~MFiles.VAF.Common.MFIdentifier">
            <summary>
            Implicit conversion of int to Ident, allowing: <c>MFIdentifier x = 109;</c>
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.op_Implicit(System.Int64)~MFiles.VAF.Common.MFIdentifier">
            <summary>
            Implicit conversion of long int to Ident, allowing: <c>MFIdentifier x = 109;</c>
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifier.IsNullOrEmpty(MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Indicates whether specified MFIdentifier is null or empty.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.Alias">
            <summary>
            Alias string.
            Setting this will clear the resolved ID value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.ID">
            <summary>
            ID integer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.GUID">
            <summary>
            Alias for the Guid member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.Guid">
            <summary>
            GUID if original string value was valid GUID, else empty string.
            AsOfNow the Alias will also return valid GUID, this might change in the future.
            </summary>
            <remarks>Internally GUID is not any different from Alias.</remarks>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.IsEmpty">
            <summary>
            Indicates if the identifier is not set, or set to empty.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.IsResolved">
            <summary>
            Indicates if the set identifier is already resolved.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.IsGuid">
            <summary>
            Indicates if the set identifier is valid GUID format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.IsObjVer">
            <summary>
            Indicates if the identifier is valid ObjVer format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.IsObjID">
            <summary>
            Indicates if the identifier is valid ObjID format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.Resolved">
            <summary>
            Is this identifier is resolved to valid ID. Use IsResolved.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.Empty">
            <summary>
            Is this MFIdentifier empty == unset value. Use IsEmpty.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFIdentifier.UnresolvedID">
            <summary>
            Value of unresolved ID used as "error-value" (for this structure type).
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFIdentifier.Exceptions">
            <summary>
            Strings used in class.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFIdentifier.SetAsType">
            <summary>
            Types of values set into MFIdentifier.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.SetAsType.Unset">
            <summary>
            The content is unset.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.SetAsType.Alias">
            <summary>
            The content is set as alias.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.SetAsType.ID">
            <summary>
            The content is set as ID.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFIdentifier.SetAsType.Guid">
            <summary>
            The content is set as Guid.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFIdentifierJsonConverter">
            <summary>
            Json converter for MFIdentifier for serialization purposes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifierJsonConverter.CanConvert(System.Type)">
            <summary>
            Can the object be converted with this.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifierJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serialize MFIdentifier as JSON.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:MFiles.VAF.Common.MFIdentifierJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read JSON into MFIdentifier.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFPropertyValuesBuilder">
            <summary>
            Provides chainable convenience methods for defining a new object's properties.
            Allows properties passed as aliases, by looking up the correct IDs.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.#ctor(MFilesAPI.Vault)">
            <summary>
            Creates a new instance with an empty PropertyValues collection. 
            </summary>
            <param name="vault">The vault in which the property values will be stored.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.#ctor(MFilesAPI.Vault,MFilesAPI.PropertyValues)">
            <summary>
            Creates a new instance that wraps a copy of the passed property values.
            </summary>
            <param name="vault">The vault in which the property values will be stored.</param>
            <param name="values">The base values from which to start.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Add(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property value to the list.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="dataType">The datatype of the PropertyValue</param>
            <param name="value">The value of the PropertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Add(MFilesAPI.PropertyValue)">
            <summary>
            Adds a property value to the list.
            </summary>
            <param name="propVal">The propertyValue to add.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Add(System.Object,MFilesAPI.TypedValue)">
            <summary>
            Adds a property value to the list.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="value">The value of the PropertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.CopyFrom(MFilesAPI.PropertyValues,System.Object[])">
            <summary>
            Copies a set of property values to this set.
            </summary>
            <param name="propVals">A list of propertyValues from which to copy property values</param>
            <param name="props">A list of the propertyDefs whose propertyValues should be copied.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.CopyFrom(MFiles.VAF.Common.ObjVerEx,System.Object[])">
            <summary>
            Copies a set of property values from the passed object to this set of property values.
            </summary>
            <param name="objVerEx">The object from whose propertyValues should be copied.</param>
            <param name="props">A list of the propertyDefs whose propertyValues should be copied.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Remove(System.Object)">
            <summary>
            Removes the specified property value.
            </summary>
            <param name="prop">A reference to the PropertyDef, whose propetyValue will be removed.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.AddLookup(System.Object,System.Object)">
            <summary>
            Adds a lookup to the passed propertyvalue. Creating it if it doesn't already exist.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to add to the propertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.AddLookup(System.Object,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
            Adds a lookup to the passed propertyvalue. Creating it if it doesn't already exist.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to add to the propertyValue</param>
            <param name="exactVersion">
              Indicates whether the exact version of the 
              item should be used or if -1 (latest) should be used as the version..
            </param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetLookup(System.Object,System.Int32,System.Int32)">
            <summary>
             Sets a porperty to contain one lookup value. Creating it if it doesn't already exist.
             Works on both SSLU and MSLU, and optionally allows the specific version to be specified.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to set to the propertyValue</param>
            <param name="version">The version that the lookup should reference.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetLookup(System.Object,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
             Sets a porperty to contain one lookup value. Creating it if it doesn't already exist.
             Works on both SSLU and MSLU, and optionally allows the specific version to be specified.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to set to the propertyValue</param>
            <param name="exactVersion">
              Indicates whether the exact version of the 
              item should be used or if -1 (latest) should be used as the version..
            </param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetLookup(System.Object,System.Object)">
            <summary>
             Sets a porperty to contain one lookup value. Creating it if it doesn't already exist.
             Works on both SSLU and MSLU.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to set to the propertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.RemoveLookup(System.Object,System.Object)">
            <summary>
            Removes a lookup value from a particular property, if set.
            </summary>
            <param name="prop">A reference to the propertyDef, whose value should have the passed lookup removed.</param>
            <param name="item">A reference to the item to be removed.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetTitle(System.String,System.Object)">
            <summary>
            Sets the default title property, and also optionally the custom one defined in a class.
            </summary>
            <param name="title">The title to be set.</param>
            <param name="forClass">OPtional class reference, so that the class specific title property can also be set.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetClass(System.Object)">
            <summary>
            Sets the class property.
            </summary>
            <param name="value">A reference to the class.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetSFD(System.Boolean)">
            <summary>
            Sets the SingleFileDocument property.
            </summary>
            <param name="sfd">The value for the single file document.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetWorkflowState(System.Object,System.Object)">
            <summary>
            Sets the workflow and state properties.
            </summary>
            <param name="workflow">A reference to the workflow to to be set. If null, the workflow is resolved from the passed state.</param>
            <param name="state">A reference to the state to be set. If null, the first state of the workflow is used.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.RemoveSystemProperties">
            <summary>
            Removes all the built-in properties.
            
            Properties to remove:
            
            MFBuiltInPropertyDefCreated,
            MFBuiltInPropertyDefCreatedBy,
            MFBuiltInPropertyDefLastModified,
            MFBuiltInPropertyDefLastModifiedBy,
            MFBuiltInPropertyDefStatusChanged,
            MFBuiltInPropertyDefSizeOnServerThisVersion,
            MFBuiltInPropertyDefSizeOnServerAllVersions,
            MFBuiltInPropertyDefStateEntered,
            MFBuiltInPropertyDefObjectChanged
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyValuesBuilder.Vault">
            <summary>
            The vault to which the property values will be saved.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyValuesBuilder.Values">
            <summary>
            The propertyValues that this object wraps.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyValuesBuilder.HumanReadable">
            <summary>
            A human readable string of the set property values.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFSearchBuilder">
            <summary>
            Provides a chainable SearchConditions wrapper with convenience methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.#ctor(MFilesAPI.Vault,System.String)">
            <summary>
            Creates a new instance wrapping a SearchConditions created from the passed string.
            </summary>
            <param name="vault">The vault to search.</param>
            <param name="conditions">Initial search conditions</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.#ctor(MFilesAPI.Vault,MFilesAPI.SearchConditions)">
            <summary>
            Creates a new instance wrapping a copy of the passed SearchConditions.
            </summary>
            <param name="vault">The vault to search.</param>
            <param name="conditions">Initial search conditions</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.#ctor(MFilesAPI.Vault)">
            <summary>
            Creates a new instance wrapping an empty SearchConditions object.
            </summary>
            <param name="vault">The vault to search.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Property(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property based, 'equal' search condtion.
            </summary>
            <param name="property">The propertyDef of the condtion.</param>
            <param name="dataType">The datatype of the value.</param>
            <param name="value">The value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Property(System.Object,MFilesAPI.TypedValue)">
            <summary>
            Adds a property based, 'equal' search condtion.
            </summary>
            <param name="property">The propertyDef to of the condtion.</param>
            <param name="value">The value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.PropertyNot(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property based, 'not equal' search condtion.
            </summary>
            <param name="property">The propertyDef of the condtion.</param>
            <param name="dataType">The datatype of the value.</param>
            <param name="value">The value to exclude from the results.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.PropertyNotMissing(System.Object)">
            <summary>
            Adds a property based search condtion to check if the property value is not missing.
            </summary>
            <param name="property">The propertyDef to of the condtion.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Status(MFilesAPI.MFStatusType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a status based, 'equal' search condtion.
            </summary>
            <param name="sType">The status type.</param>
            <param name="dType">The data type.</param>
            <param name="v">The status value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.StatusNot(MFilesAPI.MFStatusType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a status based, 'not equal' search condtion.
            </summary>
            <param name="sType">The status type.</param>
            <param name="dType">The data type.</param>
            <param name="v">The status value to exclude from the search results.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.References(System.Object,System.Object)">
            <summary>
            Sets a reverse reference search condtion. (Result.Property = item.ID)
            </summary>
            <param name="property">The property in which the passed object should exist.</param>
            <param name="item">A reference to an object.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.References(System.Object,MFilesAPI.ObjVer)">
            <summary>
            Sets a reverse reference search condtion that targets an exact object version with a property
            </summary>
            <param name="property">The property in which the passed object should exist.</param>
            <param name="objver">A reference to an object.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.ReferencesWithAnyProperty(System.Object)">
            <summary>
            Sets an any property reference search condition.
            </summary>
            <param name="item">A reference to an object (any version of the object).</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.ReferencesWithAnyProperty(MFilesAPI.ObjVer)">
            <summary>
            Sets a reverse reference search condtion that targets an exact object version with any property.
            </summary>
            <param name="objver">A reference to an object, exact version.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.ObjType(System.Object)">
            <summary>
            Adds an ObjectType condition.
            </summary>
            <param name="objType">A reference to the object Types that should be included in the results.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Object(System.Object)">
            <summary>
            Add an ObjectID condition.
            </summary>
            <param name="id">A reference to an object to find.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.NotObject(System.Object)">
            <summary>
            Creates a condition that excludes an object by it's ID.
            </summary>
            <param name="id">A reference to an object to exclude from the search.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Class(System.Object)">
            <summary>
            Creates a condtion for a specific class.
            </summary>
            <param name="objClass">A reference to the class to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Deleted(System.Boolean)">
            <summary>
            Creates a deleted condition.
            </summary>
            <param name="deleted">Indicates the deleted status to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Record(System.Boolean)">
            <summary>
            Creates a condition for the record property.
            </summary>
            <param name="record">Indicates the record property value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Find(MFilesAPI.MFSearchFlags,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Executes an object search in the vault with the current conditions.
            </summary>
            <param name="searchFlags">Search flags for the search operation.</param>
            <param name="sort">Indicates whether the results should be sorted by the server.</param>
            <param name="maxResults">The maximum number of results to return (0 means unlimited)</param>
            <param name="searchTimeoutInSeconds">The timeout in seconds for the search operation (0 means infinite).</param>
            <returns>The results of the search.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.FindEx(MFilesAPI.MFSearchFlags,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Executes an object search in the vault with the current conditions,
            wrapping each result as an ObjVerEx object.
            </summary>
            <param name="searchFlags">Search flags for the search operation.</param>
            <param name="sort">Indicates whether the results should be sorted by the server.</param>
            <param name="maxResults">The maximum number of results to return (0 means unlimited)</param>
            <param name="searchTimeoutInSeconds">The timeout in seconds for the search operation (0 means infinite).</param>
            <returns>The results of the search, with the found ObjectVersions wrapped as ObjVerEx objects.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.FindOneEx(MFilesAPI.MFSearchFlags,System.Int32)">
            <summary>
            Executes an object search in the vault with the current conditions,
            and returning the first result wrapped as an ObjVerEx object.
            </summary>
            <param name="searchFlags">Search flags for the search operation.</param>
            <param name="searchTimeoutInSeconds">The timeout in seconds for the search operation (0 means infinite).</param>
            <returns>The first result wrapped as an ObjVerEx object.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.Vault">
            <summary>
            The vault to which these search conditions apply.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.Conditions">
            <summary>
            The SearchConditions that this object wraps.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.HumanReadable">
            <summary>
            A human readable string representing the set conditions.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.FilterString">
            <summary>
            Quick access to a string version of the search conditions. Primarily for debugging.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.NotFoundException">
            <summary>
            A generic 'Not found' exception. This is .NET replacement for the E_MFILES_NOT_FOUND error.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.NotFoundException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFUtilsConstants">
            <summary>
            Format strings used by MFUtils.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFUtilsConstants.ParseError">
            <summary>
            {0} = Object type we are trying to parse the string into.
            {1} = The string representation of the object to be parsed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFUtilsConstants.NoWorkflowStates">
            <summary>
            {0} = Workflow ID
            {1} = Workflow Name
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFUtils">
            <summary>
            Provides some common utility methods for M-Files operations.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFUtils.DefaultClassPropertyDefs">
            <summary>
            List of properties included automatically as associated property defs in all classes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsValidGuid(System.String)">
            <summary>
            Indicates whether the passed string is a vaild M-Files formatted GUID.
            
            {00000000-0000-0000-0000-000000000000}
            
            </summary>
            <param name="guid">A guid string.</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ObjIDString(MFilesAPI.ObjID)">
            <summary>
            Converts an ObjID into human readable, and code-parseable string.
            </summary>
            <param name="objID">The source ObjID object.</param>
            <returns>A string represenation of the ObjID.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsObjIDString(System.String)">
            <summary>
            Indicates if the passed string matches a valid ObjID format.
            </summary>
            <param name="objIDString">A string representation of an ObjID</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ParseObjIDString(System.String)">
            <summary>
            Parses a string into an ObjID object.
            </summary>
            <param name="objIDString">A string representation of an ObjID.</param>
            <returns>The corresponding ObjID object</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ObjVerString(MFilesAPI.ObjVer)">
            <summary>
            Converts an ObjVer into human readable, and code-parseable string.
            </summary>
            <param name="objVer">The source ObjVer object.</param>
            <returns>A string represenation of the ObjVer.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsObjVerString(System.String)">
            <summary>
            Indicates if the passed string matches a valid ObjVer format.
            </summary>
            <param name="objVerString">A string representation of an ObjVer.</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ParseObjVerString(System.String)">
            <summary>
            Parses a string into an ObjVer object.
            </summary>
            <param name="objVerString">A string representation of an ObjVer.</param>
            <returns>The corresponding ObjVer object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetWorkflowIDByState(MFilesAPI.Vault,MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Finds a state's workflow.
            </summary>
            <param name="vault">The vault in which the state exists.</param>
            <param name="state">A reference to the state.</param>
            <returns>The id of the workflow which the passed state belongs to.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetFirstWorkflowState(MFilesAPI.Vault,MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Gets the first workflow state defined by a workflow.
            </summary>
            <param name="vault">The vault in which the workflow resides.</param>
            <param name="workflow">A reference to the workflow</param>
            <returns>The ID of the first workflow state defined in the passed workflow.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetStateAdmin(MFilesAPI.Vault,MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Retrieves the StateAdmin object for a state.
            </summary>
            <param name="vault">The vault in which the state resides</param>
            <param name="state">A reference to the state.</param>
            <returns>The StateAdmin object of the passed state.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetStateActionSetPropertyValue(MFilesAPI.StateAdmin,System.Int32)">
            <summary>
            Retrieves the Property value of a State action for specific property if it 
            exists. Returns null if property or action set properties not found.
            </summary>
            <param name="state">StateAdmin object of the specific state</param>
            <param name="propID">ID of the property definition as an integer</param>
            <returns>TypedValue object of the value. If nothing found, returns null.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.SetTransactionVariable(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String,System.String,System.Object)">
            <summary>
            Sets a value to the named value storage.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <param name="name">Value key.</param>
            <param name="value">Value content.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.TryGetTransactionVariable(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String,System.String,System.Object@)">
            <summary>
            Gets a specific value from the named value storage.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <param name="name">Value key.</param>
            <param name="value">Value content.</param>
            <returns>Indication if value was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetTransactionVariables(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String)">
            <summary>
            Gets all values from a specific named value storage namespace.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <returns>Indication if value was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ClearTransactionVariable(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String,System.String)">
            <summary>
            Removes a key from the named value storage.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <param name="name">Value key.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesNotFoundError(System.Exception)">
            <summary>
            Checks if the exception is a 'not found' error.
            </summary>
            <param name="exception">The exception that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesAlreadyExistsError(System.Exception)">
            <summary>
            Checks if the Exception is a M-Files 'already exists' error.
            </summary>
            <param name="exception">The COMException that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesObjectLockedError(System.Exception)">
            <summary>
            Checks if the COMException is an 'Object Locked' error.
            </summary>
            <param name="exception">The COMException that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesAccessDeniedError(System.Exception)">
            <summary>
            Checks if the COMException is an 'Object Locked' error.
            </summary>
            <param name="exception">The COMException that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsAlreadyCheckedOutError(System.Exception)">
            <summary>
            Checks if the Exception is an 'Already checked out' error.
            </summary>
            <param name="exception">The Exception that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsRetryableMFilesLockError(System.Exception)">
            <summary>
            Resolves if the error is a locking error that may be resolved by retrying the operation.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns>True if the error represents an error that may be prevented by retrying the M-Files operation.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ConvertToLocalVault(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Converts the vault object to locally used and possibly stored vault object. This method allows the
            implementations to improve the performance by using in-process vault. 
            </summary>
            <param name="vault">The vault object.</param>
            <param name="prepareForPersisting">True to enable keep-alive timer.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMSSQLServerErrorCode(System.String,System.Int32)">
            <summary>
             Resolves if the error string represents certain SQL server error.
            </summary>
            <param name="errors">The error as string.</param>
            <param name="codeToTest">The SQL server error code to test.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.RemoveWhitespace(System.String)">
            <summary>
            Removes all whitespaces from the given string.
            </summary>
            <param name="input">The input string.</param>
            <returns>The string without the whitespace characters.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.AddWeekDays(System.DateTime,System.Int32)">
            <summary>
            Adds number of requested week days to current day and returns it.
            </summary>
            <param name="startDate">The period start date.</param>
            <param name="interval">The number of business days to add to the start date.</param>
            <returns>The period end date.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjIDExtensionMethods">
            <summary>
            Extension methods for the ObjID object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDExtensionMethods.ToString(MFilesAPI.ObjID)">
            <summary>
            Converts an ObjID into human readable, and code-parseable string.
            </summary>
            <param name="objID">The source ObjID object.</param>
            <returns>A string represenation of the ObjID.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDExtensionMethods.ToTuple(MFilesAPI.ObjID)">
            <summary>
            Converts an ObjID into a tuple that can be compared.
            </summary>
            <param name="objID"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerChanges">
            <summary>
            Resolves the property changes between an object, and its previous version.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.#ctor(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Constructor. Creates a new instance of this class.
            </summary>
            <param name="currentVersion">The latest version of an object, whose properties will be checked for changes.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.#ctor(MFiles.VAF.Common.ObjVerEx,MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Constructor. Creates a new instance of this class.
            </summary>
            <param name="laterVersion">The newer version of an object, whose properties will be checked for changes.</param>
            <param name="olderVersion">The older version of the object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.HasChanged(System.Object[])">
            <summary>
            Indicates whether the passed any of the passed properties 
            have changed since the previous version.
            </summary>
            <param name="props">The propertyDefs whose values should be checked for changes.</param>
            <returns>True if any of the passed property values has changed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.detectPropertyChanges">
            <summary>
            Classifies all property changes since the previous version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.NewVersion">
            <summary>
            The current version of the object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.Vault">
            <summary>
            The vault in which this object and it's versions reside.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.OldVersion">
            <summary>
            The previous version of the object (if it exists).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.Changed">
            <summary>
            Properties that have changed between versions.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerEx">
            <summary>
            Wraps an ObjVer object and vault, and provides convenience methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor">
            <summary>
            Default constructor which is used in ObjVerEx spoofing.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjectVersion)">
            <summary>
            Creates a new ObjVerEx Object from an ObjectVersion.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="versionInfo">ObjectVersion representing the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjectVersion,MFilesAPI.PropertyValues)">
            <summary>
            Creates a new ObjVerEx Object from an ObjectVersion.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="versionInfo">The object version details.</param>
            <param name="properties">The properties for the object version.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjectVersionAndProperties)">
            <summary>
            Creates a new ObjVerEx Object from an ObjectVersionAndProperties object.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="ovap">ObjectVersionAndProperties representing the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjVer)">
            <summary>
            Creates a new ObjVerEx Object from an ObjVer.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="objVer">ObjVer representing the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new ObjVerEx Object.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="objType">The object type of the M-Files object.</param>
            <param name="id">The id of the M-Files object.</param>
            <param name="version">The version of the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.IsType(System.Object)">
            <summary>
            Checks if the passed object type reference matches this object.
            </summary>
            <param name="objType">A reference to an objType.</param>
            <returns>True, if the object is of the type passed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasClass(System.Object)">
            <summary>
            Checks if the passed class reference matches this object.
            </summary>
            <param name="classRef">A reference to a class.</param>
            <returns>True, if the object is of the class passed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasProperty(System.Object)">
            <summary>
            Checks whether an object has a specific property.
            </summary>
            <param name="prop">A reference to the PropertyDef to look for.</param>
            <returns>Returns true if the property was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasValue(System.Object)">
            <summary>
            Checks whether an object has a specific property and it's vaule is not null.
            </summary>
            <param name="prop">A reference to the PropertyDef to look for.</param>
            <returns>Returns true if the property was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasPropertyFlag(System.Object,System.Boolean)">
            <summary>
            Checks whether an object has a specific boolean property and it is true.
            </summary>
            <param name="prop">A reference to the PropertyDef.</param>
            <param name="defaultValue">The value to return, if no value is explicitly set.</param>
            <returns>
             Returns the defaultValue if the property was not found, 
             if it was not boolean, or was not set to true.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetProperty(System.Object)">
            <summary>
            Returns the specified object property if found.
            </summary>
            <param name="prop">The PropertyDef id of the property to look for.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetPropertyText(System.Object)">
            <summary>
            Returns the text representation of the property value.
            </summary>
            <param name="prop">The PropertyDef id of the property to look for.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookupID(System.Object)">
            <summary>
            Returns the lookup id of a Lookup propertyValue in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to the propery whose lookup should be returned.</param>
            <returns>The id of the lookup if found, -1 otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookups(System.Object)">
            <summary>
            Returns the property's value as a lookups collection.
            </summary>
            <param name="prop">A reference to a Lookup based property.</param>
            <returns>The lookups value of the property. Empty lookups object if property was not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.TryGetProperty(System.Object,MFilesAPI.PropertyValue@)">
            <summary>
            Attempts to retreive the specified PropertyValue in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to the property.</param>
            <param name="propVal">The property value if found.</param>
            <returns>True if a property value was found, and the propVal value was set.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetProperty(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds or updates the specified PropertyValue in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to the property.</param>
            <param name="dataType">Datatype of the value/property.</param>
            <param name="value">The value to set for the property.</param>
            <returns>The ProperyValue added to the object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetProperty(MFilesAPI.PropertyValue)">
            <summary>
            Adds or updates the specified PropertyValue in the PropertyValue collection.
            </summary>
            <param name="propVal">The property value to add to the object.</param>
            <returns>The actual ProperyValue added to the object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.RemoveProperty(System.Object)">
            <summary>
            Removes the specified PropertyValue from the PropertyValue collection. 
            </summary>
            <param name="prop">A reference to the property to remove.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetLookup(System.Object,System.Object)">
            <summary>
            Sets the passed lookup item as the only value of  specified property in the PropertyValue collection. 
            </summary>
            <param name="prop">The propertyValue to set the lookup to.</param>
            <param name="item">A value reference to set the lookup value to.</param>
            <returns>The updated PropertyValue.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasLookup(System.Object,System.Object)">
            <summary>
            Determines if the referenced item is present in the referenced property.
            </summary>
            <param name="prop">The propertyValue to check for the lookup.</param>
            <param name="item">A value reference to the lookup.</param>
            <returns>True if the item is present in the property's lookups.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.AddLookup(System.Object,System.Object)">
            <summary>
            Adds a lookup item to the specified property in the PropertyValue collection. 
            Adding the property to the object if it doesn't already exist.
            </summary>
            <param name="prop">The propertyValue to add the lookup to.</param>
            <param name="item">A value reference to set the lookup value to.</param>
            <returns>True if the PropertyValue was updated.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.AddLookup(System.Object,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
            Adds a lookup to the passed propertyvalue. Creating it if it doesn't already exist.
            </summary>
            <param name="prop">The propertyValue to add the lookup to</param>
            <param name="item">The objVer to set the lookup to</param>
            <param name="exactVersion">Indicates whether the exact version info should be used from the ObVer object.</param>
            <returns>True if the PropertyValue was updated.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.RemoveLookup(System.Object,System.Object)">
            <summary>
            Removes a lookup item from the specified property in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to a lookup based property.</param>
            <param name="item">The item to remove from the PropertyValue lookups.</param>
            <returns>True if the item was removed from the properties lookups. False if the property or item was not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetWorkflowState(System.Object,System.Object)">
            <summary>
            Sets workflow and state values for the object.
            </summary>
            <param name="workflow">A reference to the workflow to set.</param>
            <param name="state">A reference to the state to set.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetDirectReference(System.Object)">
            <summary>
            Returns the first non-deleted and non-destroyed object reference found in the given lookup based property.
            </summary>
            <param name="prop">A reference to the property that holds a certain object reference.</param>
            <returns>An ObjVerEx wrapped reference to existing object resolved via the passed property.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetDirectReferences(System.Object)">
            <summary>
            Returns the all references to non-deleted and non-destroyed objects found in the given lookup based property.
            </summary>
            <param name="prop">A reference to the property that holds a certain object references.</param>
            <returns>An ObjVerEx wrapped list of existing objects resolved via the passed property.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetAllDirectReferences(System.Object)">
            <summary>
            Gets all the direct references found in the given lookup-based property.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetDirectReferences(System.Object,System.Boolean)">
            <summary>
            Gets all the direct references found in the given lookup-based property.
            </summary>
            <param name="prop"></param>
            <param name="includeDeletedItems">True to include deleted items.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookupsFromProperty(System.Object)">
            <summary>
            Gets all the object lookups from a lookup based property.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetIndirectReferences(MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Returns a set of objects that reference this one.
            </summary>
            <param name="prop">
            The property through which items must reference this objVer. If not passed the related items can
            reference the target objVer via any property.
            </param>
            <param name="objType"> The object type of the indirect references to return </param>
            <param name="objClass"> The class of the indirect references to return </param>
            <returns> </returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SaveProperty(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Saves the specific property immediately.
            </summary>
            <param name="prop">A reference to the property</param>
            <param name="dataType">The datatype of the value.</param>
            <param name="value">The value to save for the property.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SaveProperty(MFilesAPI.PropertyValue)">
            <summary>
            Saves the specific property immediately.
            </summary>
            <param name="value">The saved property value</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SaveProperties(MFilesAPI.PropertyValues)">
            <summary>
            Saves all properties as they currently are set, or the ones passed.
            </summary>
            <param name="properties">
            Specific property values to set on the object (optional).
            If set, all updates to the internal propertyValues will be overwritten.
            If not set, updates to the internal propertyValues will be saved.
            </param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasMatchingValues(MFilesAPI.PropertyValues,System.Object[])">
            <summary>
            Indicates whether the specified properties in the passed PropertyValue collection have values
            that match in this object. If any of the property values cannot be resolved for either object
            there is never a match.
            
            When comparing lookups, versions in a lookup and the order of the lookups are meaningful.
            </summary>
            <param name="propVals">A set of property values to compare.</param>
            <param name="props">References to properties whose valuse should be compared.</param>
            <returns>True if all the passed properties have values that match those in this object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CheckOut">
            <summary>
            Checks out the object. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CheckIn(System.String,System.Int32)">
            <summary>
            Checks in the object. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.AssertCheckedOut">
            <summary>
            Asserts that the object is checked out. Throws an exception if it isn't. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.StartRequireCheckedOut">
            <summary>
            Checks out the object if it isn't already.
            
            Should be paired with the EndRequireCheckedOut() call when an operation
            requiring the object to be checked out is complete.  The return value of this
            method should be the first paramter of EndRequireCheckedOut().
            
            </summary>
            <returns>True, if object was not previously checked out, but is now.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.EndRequireCheckedOut(System.Boolean,System.Int32)">
            <summary>
            Checks in the object if it was previously checked out by StartRequireCheckedOut().
            </summary>
            <param name="start">The value obtained from StartRequireCheckedOut(). If true, the object will be checked in.</param>
            <param name="user">The modified by user to be set when checking in the object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Rollback(System.Int32,System.String)">
            <summary>
            Rolls back the object to a previous version, adding optional comment.
            </summary>
            <param name="version">The version to rollback to.</param>
            <param name="comment">The version comment for the rollback.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Delete">
            <summary>
            Deletes the underlying M-Files object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Destroy">
            <summary>
            Destroys the underlying M-Files object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ForceUndoCheckout">
            <summary>
            Forces the undo CheckOut operation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetModifiedBy(System.Int32)">
            <summary>
            Updates the last modified by property for the object.
            (Assumes the object is checked out)
            </summary>
            <param name="userID">The id of the user who will appear as the modifier.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetCreatedBy(System.Int32)">
            <summary>
            Updates the created by property for the object.
            (Assumes the object is checked out)
            </summary>
            <param name="userID">The id of the user who will appear as the creator.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CanCurrentUserRead(MFilesAPI.SessionInfo)">
            <summary>
            Indicates whether the passed user can see the object.
            </summary>
            <param name="sessionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CanCurrentUserDelete(MFilesAPI.SessionInfo)">
            <summary>
            Indicates whether the passed user can delete this object version.
            </summary>
            <param name="sessionInfo"></param>
            <returns>True if the user can delete this version, otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CanCurrentUserEdit(MFilesAPI.SessionInfo)">
            <summary>
            Indicates whether the passed user can edit this object version.
            </summary>
            <param name="sessionInfo"></param>
            <returns>True if the user can edit this version, otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ReplaceFiles(MFilesAPI.SourceObjectFiles)">
            <summary>
            Replaces the object's existing files with the ones passed.
            </summary>
            <param name="files">The new files.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ExpandPlaceholderText(System.String,System.Boolean)">
            <summary>
            Returns a string with M-Files placeholders replaced with values.
            Supports: directives: OBJID|OBJVER|MFILESURL|OBJNAME.
            Supports: reference types: PROPERTY|OBJTYPE.
            Supports: id number and {alias} referencing.
            </summary>
            <param name="format">A string containing placeholders that should be replaced.</param>
            <param name="hideMissingValues">
            Indicates whether placeholders should be left as they are if the object doesn't have a
            property referenced by a placeholder, instead of being replaced by an empty string.
            If set to false, format string can be passed to multiple objects.
            </param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ToString">
            <summary>
            Returns a string representation of the object version.
            </summary>
            <returns>String representation of the object "(ObjType-ID-Version)"</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the object version.
            </summary>
            <param name="humanReadable">If true, it will add the object title to the ouptut.</param>
            <returns>String representation of the object "(ObjType-ID-Version)"</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetHashCode">
            <summary>
            Overrides hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Equals(System.Object)">
            <summary>
            Overrides generic equals function.
            </summary>
            <returns>Return true if object is an ObjVerEx and the type, id, and version match.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Equals(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Overrides type specific equals function.
            </summary>
            <returns>Return true if object type, id, and version match.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Equals(MFiles.VAF.Common.ObjVerEx,System.Boolean)">
            <summary>
            Compares to the other ObjVerEx with the option of leaving the
            version information out of the comparison.
            </summary>
            <param name="other">Compared ObjVerEx.</param>
            <param name="ignoreVersion">Flag indicating whether version should be not used when comparing.</param>
            <returns>True if the objects are a match respect to the arguments.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Refresh">
            <summary>
            Updates the ObjVerEx to the latest version on the server.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Latest(MFilesAPI.Vault,MFilesAPI.ObjID)">
            <summary>
            Returns an ObjVerEx object pointing to the latest version of the M-Files object.
            </summary>
            <param name="vault">The vault in which the object exists.</param>
            <param name="objID">The ObjID of the object.</param>
            <returns>The new ObjVerEx object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Parse(MFilesAPI.Vault,System.String)">
            <summary>
            Loads an ObjVerEx object based on a ObjID or ObjVer string representation
            </summary>
            <param name="vault">The vault in which the object exists.</param>
            <param name="s">The string to be parsed.</param>
            <returns>The new ObjVerEx object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.TryParse(MFilesAPI.Vault,System.String,MFiles.VAF.Common.ObjVerEx@)">
            <summary>
            Tries to loads an ObjVerEx object based on a ObjID or ObjVer string representation
            </summary>
            <param name="vault">The vault in which the object exists.</param>
            <param name="s">The string to be parsed.</param>
            <param name="objVerEx">Set to the ObjVerEx object if successful.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Update(MFilesAPI.ObjectVersionAndProperties)">
            <summary>
            Updates some cached data within this object.
            </summary>
            <param name="ovap">New object version details.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Update(MFilesAPI.ObjectVersion)">
            <summary>
            Updates some cached data within this object.
            </summary>
            <param name="versionInfo">New object version details.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.EnsureUpdated">
            <summary>
            Fetches the object data and properties from server if they are not fetched yet.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.LookupToObjVerEx(MFilesAPI.Lookup)">
            <summary>
            Converts a lookup to an ObjVerEx
            </summary>
            <param name="lookup">The lookup to convert.</param>
            <returns>An ObjVerEx object representing the lookup item.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookupText(MFilesAPI.PropertyDef,MFilesAPI.Lookup)">
            <summary>
            Resolves hidden text in a lookup item.
            </summary>
            <param name="propDef">The property def in which the lookup is stored.</param>
            <param name="lookup">The lookup to resolve the text for.</param>
            <returns>The text value of the lookup.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetValueListPropertyDef(System.Object)">
            <summary>
            Returns a PropertyDef that matches the given object. Throws ArgumentExceptions if property id was not resolved
            or the property definition was not based on a value list.
            </summary>
            <param name="prop">Resolvable object</param>
            <returns>PropertyDef</returns>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Vault">
            <summary>
            Returns the vault in which this object resides.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ObjVer">
            <summary>
            Returns the ObjVer of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ObjID">
            <summary>
            Returns the ObjID of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Type">
            <summary>
            Returns the Type of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ID">
            <summary>
            Returns the ID of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Version">
            <summary>
            Returns the Version of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Title">
            <summary>
            The title of this object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Info">
            <summary>
            Returns the version information associated with this ObjVer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Properties">
            <summary>
            Returns the properties associated with this ObjVer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Class">
            <summary>
            Returns the object's class ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Workflow">
            <summary>
            Returns the object's workflow. -1 if not set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.State">
            <summary>
            Returns the object's state. -1 if not set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsTemplate">
            <summary>
            Indicates whether this object is an M-Files template.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsRecord">
            <summary>
            Indicates whether this object is a M-Files Record.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsDestroyed">
            <summary>
            Indicates whether the object version has been destroyed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.History">
            <summary>
            Retreives the history of this object, with each version wrapped as an ObjVerEx object.
            Also ensures the order of the object is from newest to oldest.
            Includes all versions, including the called instance.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.PreviousVersion">
            <summary>
            The previous version of this object.
            Will fetch the properties and info of the previous version, as well.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.CanModify">
            <summary>
            Determines if this version can be modified.
            Specifically determines if this is the latest
            version, and is not checked out, or is checked out to this user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsFirstVersion">
            <summary>
            Determines whether this object version is the first of the object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Permissions">
            <summary>
            Returns this object version's permissions.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ACL">
            <summary>
            Returns this object version's ACL.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsLatestVersion">
            <summary>
            Returns a boolean indicating whether the object is of the
            latest version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.VersionComment">
            <summary>
            The version comment.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueChangeType">
            <summary>
            Indicates the type of property change between versions of an object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.None">
            <summary>
            No property change.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.Added">
            <summary>
            The property value was added.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.Modified">
            <summary>
            The property value was modified.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.Removed">
            <summary>
            The property value was removed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueChange">
            <summary>
            Defines a changed property value between object versions.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueChange.#ctor(MFilesAPI.PropertyValue,MFilesAPI.PropertyValue)">
            <summary>
            Constructor. Creates a new instance of this class.
            </summary>
            <param name="oldValue">The previous property value, if any.</param>
            <param name="newValue">The current value, if any.</param>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.OldValue">
            <summary>
            The previous version's property value (if there was one).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.NewValue">
            <summary>
            The current version's property value (if there is one).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.PropertyDef">
            <summary>
            The PropertyDef ID of the property Value(s).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.DataType">
            <summary>
            The data type of the propertyValue(s)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.ChangeType">
            <summary>
            The type of property change between versions.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueExtensionMethods">
            <summary>
            Provides convenience extension methods for the PropertyValue objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.IsEqual(MFilesAPI.PropertyValue,MFilesAPI.PropertyValue,MFiles.VAF.Common.EqualityCompareOptions)">
            <summary>
            Checks if the property values are equal.
            
            If either of the property values is null, the values are
            treated as they were different.
            </summary>
            <param name="left">The first property value.</param>
            <param name="right">The second property value.</param>
            <param name="options">The equality comparison options.</param>
            <returns>Boolean indicating whether the property values were the same.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.AddLookup(MFilesAPI.PropertyValue,System.Int32,System.Int32)">
            <summary>
            Adds a single lookup to a lookup property.
            </summary>
            <param name="prop">PropertyValue</param>
            <param name="item">Item</param>
            <param name="version">Version</param>
            <returns>A flag indicating a change</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.RemoveLookup(MFilesAPI.PropertyValue,System.Int32)">
            <summary>
            Removes the item from the specified lookup property.
            </summary>
            <param name="prop">Property value</param>
            <param name="item">Removed item</param>
            <returns>Flag indicating the change</returns>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValuesExtensionMethods">
            <summary>
            Provides convenience extension methods for the PropertyValues collection.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.Exists(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Checks whether an object has a specific property.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef ID.</param>
            <returns>Returns true if the property was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.HasValue(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Checks whether an object has a specific property and its value is not null.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef ID.</param>
            <returns>Returns true if the property was found and has a value.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.HasFlag(MFilesAPI.PropertyValues,System.Int32,System.Boolean)">
            <summary>
            Checks whether an object has a specific boolean property and it is true.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef ID.</param>
            <param name="defaultValue">The default value to use in case where the property is missing or it doesn't have a value.</param>
            <returns>
             Returns defaultValue if the property was not found, 
             if it was not boolean, or was not set to true.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.GetProperty(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Returns the specified object property if found.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef id of the property to look for.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.TryGetProperty(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.PropertyValue@)">
            <summary>
            Tries to retreive the specified property value from the collection.
            </summary>
            <param name="props">Source property values</param>
            <param name="propID">PropertyDef ID</param>
            <param name="propVal">The value to populate if the value is found.</param>
            <returns>Return true if the propVal parameter was set successfully.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.SetProperty(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds or updates the specificed property in the property values collection with the passed value.
            </summary>
            <param name="props">The source property values in which to set the property.</param>
            <param name="propID">The propertyDef of the PropertyValue</param>
            <param name="dataType">The datatype of the PropertyValue</param>
            <param name="value">The value of the PropertyValue</param>
            <returns>The actual PropertyValue created/added to the propertyValues collection.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.SetProperty(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.TypedValue)">
            <summary>
            Adds or updates the specificed property in the property values collection with the passed value
            </summary>
            <param name="props">The source property values in which to set the property.</param>
            <param name="propID">The propertyDef of the PropertyValue</param>
            <param name="value">The typedvalue of the PropertyValue</param>
            <returns>The actual PropertyValue created/added to the propertyValues collection.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.SetProperty(MFilesAPI.PropertyValues,MFilesAPI.PropertyValue)">
            <summary>
            Adds or updates the specificed property in the property values collection.
            </summary>
            <param name="props">The source property values in which to set the property.</param>
            <param name="propVal">The property value to add to the collection.</param>
            <returns>The actual PropertyValue created/added to the propertyValues collection.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.RemoveProperty(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Removes the specified property from the property values collection.
            </summary>
            <param name="props">The source property values from which to remove the property.</param>
            <param name="propID">The property to be removed.</param>
            <returns>The removed propertyValue (if any).</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.AddLookup(MFilesAPI.PropertyValues,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the item to the specified multiselectlookup property.
            </summary>
            <param name="props">The source property values from which to remove the property.</param>
            <param name="propID">The property which to add the lookup to.</param>
            <param name="item">The item to be added as a lookup</param>
            <param name="version">The specific version of the item for the lookup to reference.</param>
            <returns>True if the property value was created or changed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.AddLookup(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
            Adds the item to the specified multiselectlookup property.
            </summary>
            <param name="props">The source property values from which to add the property.</param>
            <param name="propID">The property which to add the lookup to.</param>
            <param name="item">The item to be added as a lookup</param>
            <param name="exactVersion">Indicates whether the exact or latest version should be used.</param>
            <returns>True if the property value was created or changed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.RemoveLookup(MFilesAPI.PropertyValues,System.Int32,System.Int32)">
            <summary>
            Removes the item from the specified multiselectlookup property.
            </summary>
            <param name="props">The source property values from which to remove the property.</param>
            <param name="propID">The property from which the lookup should be removed.</param>
            <param name="item">The item to remove from the lookups.</param>
            <returns>Returns true if the property value was altered.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.ToStringEx(MFilesAPI.PropertyValues)">
            <summary>
            Returns a string representation of the property values. For debugging.
            </summary>
            <param name="propVals">The source property values from which to create the string.</param>
            <returns>A string representation of the propertyValues.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.SearchConditionsExtender">
            <summary>
            Convenience methods for SearchConditions objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.excludeDeleted(MFilesAPI.SearchConditions)">
            <summary>
            Add a condtion that excludes deleted objects.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddStatusCondition(MFilesAPI.SearchConditions,MFilesAPI.MFStatusType,MFilesAPI.MFConditionType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a status condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="sType">The object status to search.</param>
            <param name="cType">The condition for the search.</param>
            <param name="dType">The data type of the search value</param>
            <param name="v">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddPropertyCondition(MFilesAPI.SearchConditions,System.Int32,MFilesAPI.MFConditionType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property based condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="propID">A reference to the property to search.</param>
            <param name="cType">The condition for the search.</param>
            <param name="dType">The data type of the search value</param>
            <param name="v">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddPropertyCondition(MFilesAPI.SearchConditions,System.Int32,MFilesAPI.MFConditionType,MFilesAPI.TypedValue)">
            <summary>
            Adds a property based condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="propID">A reference to the property to search.</param>
            <param name="cType">The condition for the search.</param>
            <param name="tv">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddAnyPropertyCondition(MFilesAPI.SearchConditions,System.Int32,MFilesAPI.MFConditionType,MFilesAPI.TypedValue)">
            <summary>
            Adds a 'any property' based condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objType">A object type/value list id that is pointed by the lookup.</param>
            <param name="cType">The condition for the search.</param>
            <param name="tv">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectTypeID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds an ObjectType condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objTypeID">The object type to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds an Object ID condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objID">The object id to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.NotObjectID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds a condition to exclude a certain object ID.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objID">The object ID to exclude.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectClassID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds a condition for objects with a specific class id.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="classID">Class ID to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectClassID(MFilesAPI.SearchConditions,System.Int32[])">
            <summary>
            Adds a condition for objects with any of the specified class ids.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="classIDs">Class IDs) to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.NameOrTitle(MFilesAPI.SearchConditions,System.String)">
            <summary>
            Adds a condition for the name/title of an object.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="name">Title to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.BetweenDates(MFilesAPI.SearchConditions,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Adds a condition to search for objects between a certain date range.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="propId">Reference to a date property.</param>
            <param name="startDate">Start of date range</param>
            <param name="endDate">End of date range.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.DateRangeIntersects(MFilesAPI.SearchConditions,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Adds a condition to search for objects intersecting a certain date range.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="startDatePropId">Reference to a start date property.</param>
            <param name="endDatePropId">Reference to an end date property.</param>
            <param name="startDate">Start of date range.</param>
            <param name="endDate">End of date range.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.IStateTransitionEnvironment">
            <summary>
            The state execution environment.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IEnvironment">
            <summary>
            The execution environment interface. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IEnvironment.GetObjectClass">
            <summary>
            The object class for current event. Might need to fetch the id from MFServer.
            </summary>
            <returns>The class id.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.Vault">
            <summary>
            Current vault object. This vault object is bound with current DB transaction.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.CurrentTransactionID">
            <summary>
            The current transaction id. Represents either real transaction or enlisting DB transaction.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.ParentTransactionID">
            <summary>
            Parent transaction id. Set with enlisting transaction only.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.MasterTransactionID">
            <summary>
            The master (real) DB transaction id.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.ActivityID">
            <summary>
            The activity ID for the current event call. Can be used with event tracking framework.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.ObjVer">
            <summary>
            Object version identifier for current event. Set if the event is associated with an object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.CurrentUserID">
            <summary>
            The current (author) user id for the current event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.DisplayID">
            <summary>
            The handled object or value list item display id. Relevant only for events that handle objects of value list items.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.CurrentUserSessionInfo">
            <summary>
            The session info that represents the current (invoker) user session.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.VaultSharedVariables">
            <summary>
            Accessor for the shared variabled.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.TransactionCache">
            <summary>
            Accessor for the transaction cache.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.StateID">
            <summary>
            The current state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.StateTransitionID">
            <summary>
            The current state transition ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateTransitionEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="T:MFiles.VAF.Common.EnvironmentBase">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.objVerEx">
            <summary>
            The object version details for the target object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.objVerLocalClone">
            <summary>
            Local object version identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.currentTransactionIDLocalClone">
            <summary>
            Local transaction identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.parentTransactionIDLocalClone">
            <summary>
            Local parent transaction identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.masterTransactionIDLocalClone">
            <summary>
            Local master transaction identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.activityIDLocalClone">
            <summary>
            Local activity identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.transactionCacheLocal">
            <summary>
            Local transaction cache proxy object. The real object cannot be cloned and it lives in remote process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.vaultSharedVariablesLocal">
            <summary>
            Local shared variables cache proxy object. The real object cannot be cloned and it lives in remote process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.currentUserSessionInfoLocalClone">
            <summary>
            The session info that represents the original (invoking) user session. The object is cloned to this process.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.EnvironmentBase.GetObjectClass">
            <summary>
            Resolves the class of the target object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.EnvironmentBase.ReturnLocalCopy(System.Object,MFilesAPI.TypedValue@)">
            <summary>
            Makes a local copy of the typed value.
            </summary>        
            <param name="source">The source object.</param>
            <param name="localCopy">Reference to the local copy.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ObjVerExternal">
            <summary>
            Original object identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentTransactionIDExternal">
            <summary>
            Original transaction identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ParentTransactionIDExternal">
            <summary>
            Original parent transaction identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.MasterTransactionIDExternal">
            <summary>
            Original master transaction identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ActivityIDExternal">
            <summary>
            Original activity identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.TransactionCacheExternal">
            <summary>
            Original transaction cache object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.VaultSharedVariablesExternal">
            <summary>
            Original vault shared variables object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentUserSessionInfoExternal">
            <summary>
            The session info that represents the original (invoking) user session.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentUserID">
            <summary>
            The user id who caused the event handler call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.DisplayID">
            <summary>
            The handled object or value list item display id. Relevant only for events that handle objects of value list items.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.Vault">
            <summary>
            The vault object. The vault object session is bound with the ongoing database transaction.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.TransactionCache">
            <summary>
            Accessor for the transaction cache.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.VaultSharedVariables">
            <summary>
            Accessor for the shared variabled.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ObjVer">
            <summary>
            Accessor for the object version identifier object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentTransactionID">
            <summary>
            Accessor for the transaction id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ParentTransactionID">
            <summary>
            Accessor for the parent transaction id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.MasterTransactionID">
            <summary>
            Accessor for the master transaction id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ActivityID">
            <summary>
            Accessor for the activity id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ObjVerEx">
            <summary>
            Returns an ObjVerEx for the current environment's ObjVer, if it exists.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentUserSessionInfo">
            <summary>
            Returns the original user SessionInfo if it exists in the current context.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.StateTransitionEnvironment.propertyValuesLocalClone">
            <summary>
            Local property values object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.PropertyValuesExternal">
            <summary>
            Original property values object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.StateID">
            <summary>
            The id of the state that acts as an execution context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.StateTransitionID">
            <summary>
            The id of the state transition that acts as an execution context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.SysUtils">
            <summary>
            Provides some common utility methods for system operations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.CreateTempFolder">
            <summary>
            Creates a temporary folder.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.GetTempFileName(System.String)">
            <summary>
            Returns a temporary file name.
            </summary>
            <returns>Temp file name with extension.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.DeleteFromDisk(System.String)">
            <summary>
            Deletes a file or directory from the disk. In a case of directory the sub-folders and files are deleted recursively.
            </summary>
            <param name="path">Path to the target file.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportToEventLog(System.String,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Reports a message to the windows event log.
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="message">The message to write.</param>
            <param name="type">The message type.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportToEventLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Reports a message to the windows event log.
            </summary>
            <param name="message">The message to write.</param>
            <param name="type">The message type.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportInfoToEventLog(System.String,System.String)">
            <summary>
            Reports an informational message to the windows event log. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportInfoToEventLog(System.String)">
            <summary>
            Reports an informational message to the windows event log. 
            </summary>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String,System.String)">
            <summary>
            Reports an error message to the windows event log. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String)">
            <summary>
            Reports an error message to the windows event log. 
            </summary>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorMessageToEventLog(System.String,System.String,System.Exception,System.Diagnostics.EventLogEntryType)">
            <summary>
            Reports the exception with a prefix message to the windows event log.
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="exception">The exception object from which the error message is generated.</param>
            <param name="type">The event log entry type.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String,System.String,System.Exception)">
            <summary>
            Reports the exception with a prefix message to the windows event log.
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="exception">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorMessageToEventLog(System.String,System.Exception)">
            <summary>
            Reports the exception with a prefix message to the windows event log.
            </summary>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="exception">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String,System.Exception)">
            <summary>
            Reports an exception to the windows event log. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="ex">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportWarningToEventLog(System.String,System.String,System.Exception)">
            <summary>
            Reports an exception to the windows event log as warning. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="ex">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.Exception)">
            <summary>
            Reports an exception to the windows event log. 
            </summary>
            <param name="ex">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.AddExceptionTypeSpecificInformation(System.String,System.Exception)">
            <summary>
            For certain exception types, adds useful type specific information to the
            message.
            </summary>
            <param name="message">The original message to add information to.</param>
            <param name="exception">The exception to extract extra information from.</param>
            <returns>A potentially enriched error message.</returns>
        </member>
        <member name="F:MFiles.VAF.Common.SysUtils.rand">
            <summary>
            Random number generator for temporary file names.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.SysUtils.DefaultEventSourceIdentifier">
            <summary>
            Returns the vault application event source identifier that is used when logging to Windows event log.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.CommonTextResources">
            <summary>
            A class for localizable resource strings.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.TypedValueExtensionMethods">
            <summary>
            TypedValue extension methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.TypedValueExtensionMethods.IsEqual(MFilesAPI.TypedValue,MFilesAPI.TypedValue,MFiles.VAF.Common.EqualityCompareOptions)">
            <summary>
            Checks whether the typed values are equal based on the given options.
            
            If either of the objects are null, they are treated as not equal.
            </summary>
            <param name="left">Left TypedValue.</param>
            <param name="right">Right TypedValue.</param>
            <param name="options">Equality comparison options used.</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ExtensionMethods">
            <summary>
            Convenience methods for Vault objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ExtensionMethods.ResolveID(MFilesAPI.Vault,System.Type,System.Object)">
            <summary>
            Resolves the id of a vault element by reference.
            </summary>
            <param name="vault">The vault in which the element is defined.</param>
            <param name="type">M-Files API type of the element to resolve.</param>
            <param name="reference">
             Identifier can be:
            	- int (ID of the element)
            	- string (GUID, ID or Alias of the element)
            	- GUID (GUID of the element)
            	- enum (ID of the element)
            </param>
            <returns>The id of the element, the int value of the reference, or -1 if reference not resolved.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ExtensionMethods.ResolveItem(MFilesAPI.Vault,System.Object)">
            <summary>
            Resolves the object/valuelist item id for the passed reference
            </summary>
            <param name="vault"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ExtensionMethods.LookupID">
            <summary>
            Delegate to lookup an id with an alias or guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias that should be resolved into the id.</param>
            <returns>The id of the metadata structure element.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ExtensionMethods.LookupIDID">
            <summary>
            Delegate to lookup an id with an id. 
            </summary>
            <param name="vault">The vault object.</param>
            <param name="id">The id that should be resolved into the id.</param>
            <returns>The id of the metadata structure element.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.ExtensionMethods.VaultElementFinder.FromAlias">
            <summary>
            A delegate that will lookup an element by alias.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ExtensionMethods.VaultElementFinder.FromGuid">
            <summary>
            A delegate that will lookup an element by GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ExtensionMethods.VaultElementFinder.FromID">
            <summary>
            A delegate that will lookup/verify an element by ID.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IConfiguration">
            <summary>
            Base interface all instantiable configuration objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IConfiguration.Valid">
            <summary>
            Method for resolving if the configuration is valid.
            </summary>
            <returns>True if the configuration is valid.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.IConfiguration.ConfigurationId">
            <summary>
            The ID of the configuration.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ConfigurationStorageInVault">
            <summary>
            The default implementation of the configuration storage.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IConfigurationStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String@)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the module configuration.</param>
            <param name="data">Output parameter for the data that was read. Set to null if the configuration key can't be found.</param>
            <returns>True is the configuration key existed in the defined configuration namespace.</returns>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the module configuration.</param>
            <returns>The read configuration data. Empty string if the configuration key was not found.</returns>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.SaveConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String)">
            <summary>
            Persists the configuration data to the vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="configKey">The configuration key that identifies under which key to store the configuration.</param>
            <param name="data">The configuration data to persist.</param>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.Load``1(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Method to load the configuration from the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
            <returns>The loaded configuration object.</returns>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.Populate``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Method to populate the configuration from the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to populate.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.Deserialize``1(System.String)">
            <summary>
            Method to load the configuration from the specified string. Creates a new object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.Deserialize``1(System.String,``0)">
            <summary>
            Method to load the configuration from the specified string. Populates an existing object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
            <param name="configuration">The configuration object to populate.</param>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.Save``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Save the configuration to the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to save.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that is be used when saving.</param>
        </member>
        <member name="M:MFiles.VAF.IConfigurationStorage.Serialize``1(``0)">
            <summary>
            Serializes the given configuration object to a string.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configuration">The configuration object to save.</param>
            <returns>The configuration object serialized as string.</returns>
        </member>
        <member name="F:MFiles.VAF.ConfigurationStorageInVault.mode">
            <summary>
            Configuration ID creation mode.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.#ctor(MFiles.VAF.ConfigurationStorageInVault.ConfigurationIDCombiningMode)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String@)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the module configuration.</param>
            <param name="data">Output parameter for the data that was read. Set to null if the configuration key can't be found.</param>
            <returns>True is the configuration key existed in the defined configuration namespace.</returns>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the configuration.</param>
            <returns>The read configuration data.</returns>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.SaveConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String)">
            <summary>
            Persists the configuration data to the vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="data">The configuration data to persist.</param>
            <param name="configKey">The configuration key that identifies under which key to store the configuration.</param>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.Load``1(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Method to load the configuration from the specified vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
            <returns>The loaded configuration object.</returns>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.Populate``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Method to populate the configuration from the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to populate.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.Deserialize``1(System.String)">
            <summary>
            Method to load the configuration from the specified string. Creates a new object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.Deserialize``1(System.String,``0)">
            <summary>
            Method to load the configuration from the specified string. Populates an existing object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
            <param name="configuration">The configuration object to populate.</param>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.Save``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Save the configuration to the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to save.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that is be used when saving.</param>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.Serialize``1(``0)">
            <summary>
            Serializes the given configuration object to a string.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configuration">The configuration object to save.</param>
            <returns>The configuration object serialized as string.</returns>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.GetConfigurationID(System.String,System.String)">
            <summary>
            Generates the configuration ID according to the selected mode.
            </summary>
            <param name="configNamespace">The defined configuration namespace.</param>
            <param name="configKey">The defined configuration key.</param>
            <returns>The generated configuration ID.</returns>
        </member>
        <member name="T:MFiles.VAF.ConfigurationStorageInVault.ValidatingContractResolver">
            <summary>
            Class to extend the default contract resolver, for performing the value validations while the configuration data
            is being deserialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.ValidatingContractResolver.#ctor(System.Collections.Generic.HashSet{System.Tuple{System.Object,System.Reflection.MemberInfo}}@)">
            <summary>
            Constructor.
            </summary>
            <param name="definedMembers">The collection that receives the information about specified member values.</param>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.ValidatingContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Override for creating a validating value provider.
            </summary>
            <param name="member">The configuration member to validate.</param>
            <returns></returns>
        </member>
        <member name="F:MFiles.VAF.ConfigurationStorageInVault.ValidatingContractResolver.definedMembers">
            <summary>
            The validation results sink object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ConfigurationStorageInVault.ValidatingValueProvider">
            <summary>
            A class to wrap a serialization value provider and to perform a validation for deserialized value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.ValidatingValueProvider.#ctor(Newtonsoft.Json.Serialization.IValueProvider,System.Reflection.MemberInfo,System.Collections.Generic.HashSet{System.Tuple{System.Object,System.Reflection.MemberInfo}}@)">
            <summary>
            Constructor.
            </summary>
            <param name="actualValueProvider">The actual value provider to delegate for.</param>
            <param name="memberInfo">The member type for which this value provider exists.</param>
            <param name="definedMembers">The collection that receives the information about specified member values.</param>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.ValidatingValueProvider.GetValue(System.Object)">
            <summary>
            A pass-through value getter.
            </summary>
            <param name="target">The target object.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.ConfigurationStorageInVault.ValidatingValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Value setter. Performs the value validation.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:MFiles.VAF.ConfigurationStorageInVault.ValidatingValueProvider.actualValueProvider">
            <summary>
            The wrapped value provider.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ConfigurationStorageInVault.ValidatingValueProvider.memberInfo">
            <summary>
            The member info of the member whose values are looked after.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ConfigurationStorageInVault.ValidatingValueProvider.definedMembers">
            <summary>
            The validation results sink object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ConfigurationStorageInVault.ConfigurationIDCombiningMode">
            <summary>
            Mode that is used when specifying how the configuration ID is formed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.AssemblyLocator">
            <summary>
            AssemblyLocator contains the implementation of the assembly resolve event for an AppDomain.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyLocator.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="allowLoadingAssembliesForProbing">Specifies whether the assembly resolving event can load assemblies into the AppDomain.</param>
        </member>
        <member name="M:MFiles.VAF.AssemblyLocator.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handler for the appdomain's assembly resolve event which is fired if the system can't locate an assembly.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
            <returns>The found assembly or null if it is not found.</returns>
        </member>
        <member name="M:MFiles.VAF.AssemblyLocator.IsCompatibleAssembly(System.Reflection.AssemblyName,System.Reflection.Assembly)">
            <summary>
            Checks if the loaded assembly assemblyToCheck is compatible with the requestedAssembly.
            </summary>
            <param name="requestedAssembly">The name of the assembly that the system is trying to resolve.</param>
            <param name="assemblyToCheck">The already loaded assembly that is checked.</param>
            <returns>True if the assemblies are compatible.</returns>
        </member>
        <member name="P:MFiles.VAF.AssemblyLocator.AllowLoadingAssembliesForProbing">
            <summary>
            Specifies whether the assembly resolving event can load assemblies into the AppDomain.
            </summary>
        </member>
        <member name="T:MFiles.VAF.AssemblyProxy">
            <summary>
            AssemblyProxy is an object that can be instantiated in a separate AppDomain and called from the primary AppDomain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.AssemblyProxy.locator">
            <summary>
            The assembly locator object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyProxy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyProxy.AssemblyImplementsInterface(System.String,System.String)">
            <summary>
            Examines if the specified assembly contains a type that implements an interface with the given name.
            </summary>
            <param name="assemblyPath">The assembly file.</param>
            <param name="moduleTypeInterface">The interface name.</param>
            <returns>True if the assembly contains a type that implements an interface with the specified name.</returns>
        </member>
        <member name="T:MFiles.VAF.DynamicModuleLoader">
            <summary>
            The module loader that seeks and dynamically loads assemblies from assembly file locations.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.IModuleLoader">
            <summary>
            Interface for the module loader component.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleLoader.LoadModules(MFilesAPI.Vault,System.Boolean,System.Boolean)">
            <summary>
            Loads the modules. Creates an instance of each available class that implements IModule.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="initializeModules">True if the modules should be also initialized.</param>
            <param name="disableInfoMessageLogging">True if the loader should not write informational messages to the event log.</param>
            <returns>Collection of loaded modules.</returns>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.assemblyFolder">
            <summary>
            Path to the subfolder that contains the additional module assemblies.
            </summary>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.manager">
            <summary>
            The module manager object that is given to the loaded modules.
            </summary>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.mainAssembly">
            <summary>
            The application main assembly.
            </summary>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.locator">
            <summary>
            The assembly locator object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.#ctor(MFiles.VAF.Module.IModuleManager,System.String,System.Reflection.Assembly)">
            <summary>
            Constructor.
            </summary>
            <param name="manager">The IModuleManager that is needed when initializing the created modules.</param>
            <param name="assemblyFolder">Name of the subfolder that contains the module assemblies.</param>
            <param name="mainAssembly">The application's main assembly. Modules are searched also from there. Can be null.</param>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.LoadModules(MFilesAPI.Vault,System.Boolean,System.Boolean)">
            <summary>
            Loads the modules. Creates an instance of each available class that implements IModule.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="initializeModules">Specifies whether the loaded modules should also load their configurations. Defaults to true.</param>
            <param name="disableInfoMessageLogging">True if the loader should not write informational messages to the event log.</param>
            <returns>Collection of loaded modules.</returns>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.CreateModulesFromAssembly(System.Reflection.Assembly)">
            <summary>
            Creates instances of assembly's all classes that implement IModule.
            </summary>
            <param name="assembly">The assembly from which the modules are created.</param>
            <returns>Collection of modules.</returns>
        </member>
        <member name="T:MFiles.VAF.EventTracingForWindowsImpl">
            <summary>
            Class that implements the Event Source for Event Tracing for Windows framework.
            </summary>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeEvent(System.String,System.String)">
            <summary>
            Sends the Before Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterEvent(System.String,System.String,System.String)">
            <summary>
            Sends the After Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeExtensionMethod(System.String,System.String)">
            <summary>
            Sends the Before Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterExtensionMethod(System.String,System.String,System.String)">
            <summary>
            Sends the After Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforePropertyCustomizedAutomaticNumbering(System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterPropertyCustomizedAutomaticNumbering(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforePropertyCustomValueCalculation(System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterPropertyCustomValueCalculation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforePropertyValueValidation(System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterPropertyValueValidation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeStateRunAction(System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterStateRunAction(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeAutomaticStateTransitionTrigger(System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterAutomaticStateTransitionTrigger(System.String,System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeStatePostConditions(System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterStatePostConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeStatePreConditions(System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterStatePreConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="T:MFiles.VAF.EventTracingForWindows">
            <summary>
            Wrapper class for the EventTracingForWindowsImpl class. This is needed because the classes that inherit from EventSource can't implement interfaces.
            The possibility to implement interfaces is added to .NET 4.6.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IExecutionTrace">
            <summary>
            Interface for tracking the handler executions.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeEvent(System.String,System.String)">
            <summary>
            Sends the Before Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterEvent(System.String,System.String,System.String)">
            <summary>
            Sends the After Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeExtensionMethod(System.String,System.String)">
            <summary>
            Sends the Before Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterExtensionMethod(System.String,System.String,System.String)">
            <summary>
            Sends the After Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforePropertyCustomizedAutomaticNumbering(System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterPropertyCustomizedAutomaticNumbering(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforePropertyCustomValueCalculation(System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterPropertyCustomValueCalculation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforePropertyValueValidation(System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterPropertyValueValidation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeStateRunAction(System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterStateRunAction(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeAutomaticStateTransitionTrigger(System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterAutomaticStateTransitionTrigger(System.String,System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeStatePostConditions(System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterStatePostConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeStatePreConditions(System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterStatePreConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="F:MFiles.VAF.EventTracingForWindows.impl">
            <summary>
            The actual EventSource object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeEvent(System.String,System.String)">
            <summary>
            Sends the Before Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterEvent(System.String,System.String,System.String)">
            <summary>
            Sends the After Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeExtensionMethod(System.String,System.String)">
            <summary>
            Sends the Before Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterExtensionMethod(System.String,System.String,System.String)">
            <summary>
            Sends the After Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforePropertyCustomizedAutomaticNumbering(System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterPropertyCustomizedAutomaticNumbering(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforePropertyCustomValueCalculation(System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterPropertyCustomValueCalculation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforePropertyValueValidation(System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterPropertyValueValidation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeStateRunAction(System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterStateRunAction(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeAutomaticStateTransitionTrigger(System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterAutomaticStateTransitionTrigger(System.String,System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeStatePostConditions(System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterStatePostConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeStatePreConditions(System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterStatePreConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="T:MFiles.VAF.IConfigurationValidityMask">
            <summary>
            Interface for the configuration validity mask. The mask indicates if a configuration value has been set or validated.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IConfigurationValidityMask.MarkMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Marks the configuration member as 'defined', i.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is marked as defined.</param>
            <param name="member">The member indentity.</param>
        </member>
        <member name="M:MFiles.VAF.IConfigurationValidityMask.IsMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Resolves if a configuration member is defined. I.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is looked.</param>
            <param name="member">The member indentity.</param>
            <returns>Returns true if the member is defined.</returns>
        </member>
        <member name="T:MFiles.VAF.IMetadataStructureValidator">
            <summary>
            The validator interface for checking if the metadata structure reference of given object is valid.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IMetadataStructureValidator.ValidateItem(MFilesAPI.Vault,System.String,System.Object,MFiles.VAF.Common.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configurationId">The id of the configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.IMetadataStructureValidator.ValidateItem(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,MFiles.VAF.Common.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="T:MFiles.VAF.MetadataStructureValidator">
            <summary>
            Validation of Vault.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.ValidateItem(MFilesAPI.Vault,System.String,System.Object,MFiles.VAF.Common.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configurationId">The id of the configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.ValidateItem(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,MFiles.VAF.Common.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.ValidateItemInternal(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,MFiles.VAF.Common.ValidationResultBase,System.Object,System.Reflection.MemberInfo,System.Int32,System.Reflection.Assembly[],System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="parent">Parent object of item. Can be null.</param>
            <param name="member">The member in which this item is, can be null, and usually is.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items.</param>
            <param name="handledItems">Collection of items that have already been validated.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.CheckAndProcessDeprecatedMember(MFiles.VAF.Common.IConfiguration,System.Object,System.Reflection.MemberInfo,MFiles.VAF.Common.ValidationResultBase,System.Boolean@)">
            <summary>
            Checks and sets an error if a deprecated member has found to have a value. Processes the value assignment to the replacement member.
            </summary>
            <param name="configuration"></param>
            <param name="item"></param>
            <param name="childMember"></param>
            <param name="validationResult"></param>
            <param name="failed"></param>
        </member>
        <member name="F:MFiles.VAF.MetadataStructureValidator.unacceptableTypes">
            <summary>
            List of types which should not be validated and traversed into.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.GetValue(System.Object,System.Object)">
            <summary>
            Get value of obj, that is member of mother.
            </summary>
            <param name="obj">Any object, can be field or property or type ..</param>
            <param name="mother">Instance containing the obj, can be instance or Type or ..</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.Items(System.Object)">
            <summary>
            Return items in o as list.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.GetChildren(System.Object)">
            <summary>
            Get first level of children of the target object.
            Returns as members of the o, as FieldInfo or PropertyInfo.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.MetadataStructureValidator.ReferenceEqualityComparer">
            <summary>
            Comparer object for comparing object references.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Compares the reference equality of two objects.
            </summary>
            <param name="lhs">The first parameter.</param>
            <param name="rhs">The second parameter</param>
            <returns>True if the references are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.ReferenceEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns the hash code for the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.MetadataStructureValidator.TemporaryConfiguration">
            <summary>
            A dummy class for enabling the ValidateItem call with just the configuration id string.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataStructureValidator.TemporaryConfiguration.Valid">
            <summary>
            Method for resolving if the configuration is valid.
            </summary>
            <returns>True if the configuration is valid.</returns>
        </member>
        <member name="P:MFiles.VAF.MetadataStructureValidator.TemporaryConfiguration.ConfigurationId">
            <summary>
            The ID of the configuration.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ModularVaultApplicationBase">
            <summary>
            Common base class for application that was to use separate modules in the implementation.
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultApplicationBase">
            <summary>
            Vault application entry point
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MethodSource">
            <summary>
            Implements method source for the inheriting class.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IMethodSource">
            <summary>
            Interface for accessing methods decorated with the given attribute.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IMethodSource.GetMethodsByAttribute``1(System.Boolean)">
            <summary>
            Returns a collection of methods decorated with the given attribute.
            </summary>
            <param name="unused">True to return unused handlers, false to return current used handlers.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MethodSource.GetMethodsByAttribute``1(System.Boolean)">
            <summary>
            Returns a collection of the methods decorated with the given attribute.
            </summary>
            <param name="unused">True to return unused handlers, false to return current used handlers.</param>
            <returns>A collection of methods or an empty collection.</returns>
        </member>
        <member name="T:MFiles.VAF.IVaultApplication">
            <summary>
            Common interface for the vault applications.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Install(MFilesAPI.Vault)">
            <summary>
            Called when the vault application is installed to the target vault. Called only once in the application lifetime.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Uninstall(MFilesAPI.Vault)">
            <summary>
            Called when the vault application is uninstalled from the target vault. Called only once in the application lifetime.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Initialize(MFilesAPI.Vault)">
            <summary>
            Called when the vault is brought online.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.StartOperations(MFilesAPI.Vault)">
            <summary>
            Called when the vault operations are started.
            </summary>
            <param name="vault">The persistent vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Uninitialize(MFilesAPI.Vault)">
            <summary>
            Called when the vault is put offline.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.PermanentVault">
            <summary>
            The permanent vault object, runs as MFServer user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.MetadataStructureValidator">
            <summary>
            The metadata structure validator object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ConfigurationStorage">
            <summary>
            The configuration storage object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ExecutionTracer">
            <summary>
            The execution tracer object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ApplicationDefinition">
            <summary>
            The application definition information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.EventSourceIdentifier">
            <summary>
            Returns the vault application event source identifier that is used when logging to Windows event log.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ApplicationRunningStatus">
            <summary>
            Returns the application running status. Indicates if the application is starting, stopping or running normally.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.eventSourceIdentifier">
            <summary>
            The application event source identifier that is used in conjunction with the Windows event log.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.applicationRunningStatus">
            <summary>
            Indicates the application running status. This is volatile because the value can be accessed from multiple threads to avoid caching delays -- the enumeration read and write itself is atomic.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.eventHandlerMethods">
            <summary>
            Collections of the event handling methods.
            </summary>
            <remarks>Found through reflection for the IEventHandlerAttribute.</remarks>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.vaultExtensionMethods">
            <summary>
            Collection of vault extension methods by name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.unusedVaultExtensionNames">
            <summary>
            List of vault extension method names which are known but not used.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.stateMethods">
            <summary>
            Collection of state extension methods by state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.stateTransitionMethods">
            <summary>
            Collection of state transition extension methods by state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.propertyMethods">
            <summary>
            Collection of property extension methods by property.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.MaxTimeToWaitBackgroundOperationsAtUninitialization">
            <summary>
            Defines how long the background operations can be waited at uninitialization.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.NewEnvironment">
            <summary>
            Returns a new Event Handler environment, to be populated in the event handler script.
            </summary>
            <returns>A new environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Run(System.Object)">
            <summary>
            Invokes all methods that have the MFEventHandlerAttribute and are applicable to this event.
            </summary>
            <param name="environment">The event and environment that the assembly should process.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ExecuteVaultExtensionMethod(System.Object)">
            <summary>
            Executes the defined vault extension method.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The return value as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RunStateAction(System.Object)">
            <summary>
            Invokes the state run action handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.EvaluateAutomaticStateTransitionTrigger(System.Object)">
            <summary>
            Invokes the registered automatic state transition condition handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the condition evaluation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.EvaluateStatePreConditions(System.Object)">
            <summary>
            Invokes all the state precondition evaluation handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the condition evaluation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.EvaluateStatePostConditions(System.Object)">
            <summary>
            Invokes all the state postcondition evaluation handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the condition evaluation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ValidatePropertyValue(System.Object)">
            <summary>
            Invokes all property validation handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the validation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyAutomaticNumber(System.Object)">
            <summary>
            Invokes the property customized automatic numbering handler.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The calculated automatic number.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyCustomValue(System.Object)">
            <summary>
            Invokes the property custom value calculation handler.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The calculated custom value.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase._DebugRun(MFiles.VAF.Common.EventHandlerEnvironment,System.String,System.String,System.String)">
            <summary>
            The event handler implementation wrapper method for debug applications. This provides assistance for Vault Application Event Stack 
            Visual Studio extension.
            The Visual Studio plugin seeks this method name ("_DebugRun") and its parameter with their names. Parameter names and their
            order must not change.
            </summary>
            <param name="env">The environment object.</param>
            <param name="currentTransactionID">The transaction id for the current transaction.</param>
            <param name="parentTransactionID">The transaction id for the parent transaction.</param>
            <param name="eventHandlerName">The current event handler name.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase._Run(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            The event handler implementation.
            </summary>
            <param name="env">The environment object.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Install(MFilesAPI.Vault)">
            <summary>
            Installs the application.
            </summary>
            <param name="vault">The vault in which the application should be installed.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Uninstall(MFilesAPI.Vault)">
            <summary>
            Uninstall the application.
            </summary>
            <param name="vault">The vault in which the application should be uninstalled.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Initialize(MFilesAPI.Vault)">
            <summary>
            Initializes the vault application in the specified vault. The method e.g. installs required event delegating scripts in the vault.
            </summary>
            <param name="vaultSrc">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ValidateMetadataStructure(MFilesAPI.Vault)">
            <summary>
            Validates the application and all types in the same assembly.
            </summary>
            <param name="vault">The vault object.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.StartOperations(MFilesAPI.Vault)">
            <summary>
            Starts the vault operations in the specified vault. The method e.g. begins to use the vault in a background job.
            </summary>
            <param name="vaultPersistent">The persistable target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Install.
            InstallApplication can be used to prevent installation of the application.
            InstallApplication should also install any additional required components.
            InstallApplication cannot make changes to the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InitializeApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Initialize.
            InitializeApplication can be used to make changes to the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.StartApplication">
            <summary>
            Protected overridable for the child classes to override instead of StartOperations. PermanentVault is initialized and should be used as the vault connection.
            StartApplication should be used to start recurring background operations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.UninitializeApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Uninitialize.
            UninitializeApplication can be used make changes in the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.UninstallApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Uninitialize.
            UninstallApplication can be used to prevent uninstallation of the application.
            UninstallApplication should also uninstall any additional required components, that were installed by the InstallApplication-method.
            UninstallApplication cannot make changes to the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Uninitialize(MFilesAPI.Vault)">
            <summary>
            Uninitializes the vault application in the specified vault.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.UninitializeImpl(MFilesAPI.Vault)">
            <summary>
            Uninitializes the vault application in the specified vault.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InitializeImpl(MFilesAPI.Vault)">
            <summary>
            Reload clear the internal data structures and loads the modules and their eventhandlers.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.PopulateConfigurationObjects(MFilesAPI.Vault)">
            <summary>
            Searches the vault application for marked configuration objects (MFConfiguration attribute) and loads and validates them.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ReportMetadataStructureValidationErrors(MFilesAPI.Vault,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Handles the validation results. By default only outputs errors to event log.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="result">The configuration object validation results.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.PopulateConfigurationObjects(MFilesAPI.Vault,System.Object)">
            <summary>
            Populates a configuration objects from single host object.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="hostObject">The host object that is being searched for the configuration objects.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallHandlerDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for all handlers that are defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallEventHandlerAndVaultExtensionMethodDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for event handlers defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallStateAndStateTransitionHandlerDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for state handlers defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallPropertyHandlerDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for property handlers defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ShouldUpdateScript(System.String,System.String,System.String)">
            <summary>
            Checks if the script should be updated. The script should be updated only if the old script was automatically generated
            and the new script differs from the old one.
            </summary>
            <param name="oldScript">The old, installed script.</param>
            <param name="newScript">The new script.</param>
            <param name="warningMessage">A warning message which will be written to the event log if it seems that the new script can be installed even though it should.</param>
            <returns>True if the script should be updated.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsGeneratedAutomatically(System.String)">
            <summary>
            Checks if the given script is generated automatically. This is decided by the existence of a line with certain content.
            </summary>
            <param name="script">The script to check.</param>
            <returns>True if the script is decided to be automatically generated.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ClearAutomaticallyGeneratedScripts(MFilesAPI.Vault)">
            <summary>
            Clears the automatically generated scripts that are no longer used from the metadata structure (from property definitions and workflow states).
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsHandlerDefinedForProperty(System.Int32,MFiles.VAF.Common.PropertyAttribute.AttributeType)">
            <summary>
            Checks if the  has handler(s) of the given type.
            </summary>
            <param name="propertyDef">The id of the property whose handlers should be checked.</param>
            <param name="type">The handler type to check.</param>
            <returns>True if the specified property has handler(s) of the defined type.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsHandlerDefinedForState(System.Int32,MFiles.VAF.Common.StateAttribute.AttributeType)">
            <summary>
            Checks if the state has handler(s) of the given type.
            </summary>
            <param name="state">The id of the state whose handlers should be checked.</param>
            <param name="type">The handler type to check.</param>
            <returns>True if the specified state has handler(s) of the defined type.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsHandlerDefinedForStateTransition(System.Int32)">
            <summary>
            Checks if the state has handler(s) of the given type.
            </summary>
            <param name="stateTransition">The id of the state transition whose handlers should be checked.</param>
            <returns>True if the specified state transition has handler(s).</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.LoadHandlerMethods(MFilesAPI.Vault)">
            <summary>
            Finds and caches all event handler methods and vault extension methods in the assembly. The methods are decorated with specific attributes.
            </summary>
            <param name="vault">The vault in which to operate.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterMethodsFromSource(MFiles.VAF.Common.IMethodSource,MFilesAPI.Vault)">
            <summary>
            Registers all methods from the specified source.
            </summary>
            <param name="source">The method source.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterEventHandlers(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified event handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterVaultExtensionMethodHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified vault extension method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterStateHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified state handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterStateTransitionHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified state transition handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterPropertyHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified property handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterHandlers``1(MFiles.VAF.Common.IMethodSource,System.Action{System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault},MFilesAPI.Vault)">
            <summary>
            Generic method for collecting all methods from the given source that are decorated with the specified attribute type.
            </summary>
            <typeparam name="T">The attribute type that is being searched.</typeparam>
            <param name="source">The object that is being searched for the methods.</param>
            <param name="registerAction">The action that is executed for all the found methods.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CollectUnusedHandlers(MFiles.VAF.Common.IMethodSource)">
            <summary>
            Method for collecting extension method names which are unused.
            </summary>
            <param name="source">The object that is being searched for the methods.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetDelegateScriptTemplate(System.String)">
            <summary>
            Method for reading the VBScript template from the resources.
            </summary>
            <param name="templateName">The VBScript resource name.</param>
            <returns>The found VBScript template as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetEventHandlerDelegateScript(MFilesAPI.MFEventHandlerType)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain event type.
            </summary>
            <param name="eventType">The event handler type for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetVaultExtensionMethodDelegateScript(System.String)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain vault extension method.
            </summary>
            <param name="methodName">The vault extension method name for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateHandlerDelegateScript(MFiles.VAF.Common.StateAttribute.AttributeType)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain state.
            </summary>
            <param name="type">The state handler type for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateTransitionHandlerDelegateScript">
            <summary>
            Method for retrieving the VBScript delegation code for a certain state transition.
            </summary>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyHandlerDelegateScript(MFiles.VAF.Common.PropertyAttribute.AttributeType)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain state.
            </summary>
            <param name="type">The property handler type for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateConfigurationStorage">
            <summary>
            Overridable factory method to create the configuration storage object.
            </summary>
            <returns>The created configuration storage object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateMetadataStructureValidator">
            <summary>
            Overridable factory method to create the metadata structure validator component.
            </summary>
            <returns>The instantiated metadata structure validator object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateExecutionTracer">
            <summary>
            Overridable factory method to create the execution tracer object.
            </summary>
            <returns>The instantiated execution tracer object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateBackgroundOperationsManager(System.String)">
            <summary>
            Overridable factory method to create the background operations manager.
            </summary>
            <param name="vaultName">The name of the vault.</param>
            <returns>The instantiated background operations manager object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateEventHandlerMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.EventHandlerAttribute)">
            <summary>
            Overridable factory method to create the event handler method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateVaultExtensionMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.VaultExtensionMethodAttribute)">
            <summary>
            Overridable factory method to create the vault extension method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateStateMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateAttribute)">
            <summary>
            Overridable factory method to create the state method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateStateTransitionMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateTransitionAttribute)">
            <summary>
            Overridable factory method to create the state transition method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreatePropertyMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.PropertyAttribute)">
            <summary>
            Overridable factory method to create the property method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ConvertToLocalVault(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Overridable factory method for local vault objects. Converts the vault object to locally used and possibly 
            stored vault object. This method allows the implementations to improve the performance by using
            in-process vault. Overriding functionality may e.g. implement local caching features to the vault.
            </summary>
            <param name="vault">The original vault object.</param>
            <param name="prepareForPersisting">True if the vault object should be prepared for persisting.</param>
            <returns>The converted vault object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetEventHandlerEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local event handler environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local event handler environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local property environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local property environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local state environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local state environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateTransitionEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local state environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local state environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPrivateMethodSources">
            <summary>
            Gets private method sources
            </summary>
            <returns>Method sources.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.AssertApplicationInStableState">
            <summary>
            Throws an exception if the application is in a state where it 
            cannot properly handle server events.
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.PermanentVault">
            <summary>
            The permanent vault object, runs as MFServer user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ConfigurationStorage">
            <summary>
            The configuration storage object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.MetadataStructureValidator">
            <summary>
            The metadata structure validator object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ExecutionTracer">
            <summary>
            The execution tracer object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.BackgroundOperations">
            <summary>
            A manager for creating background operations.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.MetadataStructureValidationResult">
            <summary>
            The results from the metadata structure validation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ApplicationDefinition">
            <summary>
            The application definition information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.EventSourceIdentifier">
            <summary>
            Returns the vault application event source identifier that is used when logging to Windows event log.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ApplicationRunningStatus">
            <summary>
            Returns the application running status. Indicates if the application is starting, stopping or running normally.
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultApplicationBase.MethodInfoPriorityComparer`1">
            <summary>
            Priority comparer for event handler infos.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.MethodInfoPriorityComparer`1.Compare(`0,`0)">
            <summary>
            Compare by priority.
            </summary>
            <param name="l">The left operand for compare operation.</param>
            <param name="r">The right operand for compare operation.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="T:MFiles.VAF.Module.IModuleManager">
            <summary>
            The interface that represents the module container for all modules of the application.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleManager.GetModule(System.String)">
            <summary>
            Gets a module reference from the module manager.
            </summary>
            <param name="moduleName">The module name.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleManager.AllowLoadOfModule(MFiles.VAF.Module.IModule)">
            <summary>
            Return whether this module should be loaded or not.
            </summary>
            <param name="module">The module in question.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Module.IModuleManager.ModuleLoader">
            <summary>
            The module loader object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.IsModuleOperational(MFiles.VAF.Module.IModule,System.Boolean)">
            <summary>
            Checks whether the module is enabled. To be enabled,
            there is no need for configuration, or the configuration
            is enabled.
            </summary>
            <param name="module">The module to be checked</param>
            <param name="checkValidity">Whether to check if the module is also valid</param>
            <returns>Boolean indicating whether the module is enabled</returns>
        </member>
        <member name="F:MFiles.VAF.ModularVaultApplicationBase.modules">
            <summary>
            Loaded modules.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.GetModule(System.String)">
            <summary>
            Returns the loaded module instance based on the given configuration key.
            </summary>
            <param name="moduleName">Configuration configuration key of the wanted module.</param>
            <returns>IModule object of the wanted module, or null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.GetAppModule(System.String)">
            <summary>
            Returns the loaded module instance based on the given configuration key.
            </summary>
            <param name="moduleName">Configuration configuration key of the wanted module.</param>
            <returns>IModule object of the wanted module, or null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.Install(MFilesAPI.Vault)">
            <summary>
            Installs the application.
            </summary>
            <param name="vault">The vault in which the application should be installed.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.Initialize(MFilesAPI.Vault)">
            <summary>
            Initializes the vault application in the specified vault. The method e.g. installs required event delegating scripts in the vault.
            </summary>
            <param name="vaultSrc">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.CreateModuleLoader">
            <summary>
            Overridable factory method to create the module loader component.
            </summary>
            <returns>The instantiated module loader.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.CreateMetadataStructureValidator">
            <summary>
            Overridable factory method to create the metadata structure validator component.
            </summary>
            <returns>The instantiated metadata structure validator object.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.AllowLoadOfModule(MFiles.VAF.Module.IModule)">
            <summary>
            Return whether this module should be loaded or not.
            </summary>
            <param name="module">The module in question.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.LoadModules(MFilesAPI.Vault)">
            <summary>
            Create and add instance of each available IModule class into modules collection.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.LoadHandlerMethods(MFilesAPI.Vault)">
            <summary>
            Finds and caches all event handler methods and vault extension methods in the assembly. The methods are decorated with specific attributes.
            </summary>
            <param name="vault">The vault in which to operate.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.StartApplication">
            <summary>
            Starts the modules.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.InitializeImpl(MFilesAPI.Vault)">
            <summary>
            Reload clears the internal data structures and loads the modules and their eventhandlers.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.UninitializeImpl(MFilesAPI.Vault)">
            <summary>
            Uninitializes the vault application in the specified vault.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.ValidateModuleMetadataStructure(MFilesAPI.Vault)">
            <summary>
            Override for validating the module assemblies.
            </summary>
            <param name="vault">The vault object.</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.PopulateModuleConfigurationObjects(MFilesAPI.Vault)">
            <summary>
            Searches the modules for marked configuration objects (MFConfiguration attribute) and loads and validates them.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.ReportModuleMetadataStructureValidationErrors(MFilesAPI.Vault,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Handles the validation results. By default only outputs errors to event log.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="result">The configuration object validation results.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.Reload(MFilesAPI.Vault)">
            <summary>
            Reload clear the internal data structures and loads the modules and their eventhandlers.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="P:MFiles.VAF.ModularVaultApplicationBase.ModuleLoader">
            <summary>
            The module loader object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ScriptEnvironment">
            <summary>
            A COM-Visible object that contains variables available to a script. All complex types are dynamic.
            </summary>
            <remarks>
            This should only be used via COM in the VBScript delegation.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.Type">
            <summary>
            The event handler type. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.CurrentUserID">
            <summary>
            The current user id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.CurrentUserSessionInfo">
            <summary>
            The session info that represents the current (invoker) user session.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.DisplayID">
            <summary>
            The display id of the target object or value list item. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.StateID">
            <summary>
            The state id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.StateTransitionID">
            <summary>
            The state transition id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.InitialNextStateID">
            <summary>
            The initial next state id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.FileTransferSessionID">
            <summary>
            The file transfer session id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.FileVer">
            <summary>
            File version identifier. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.LoggedOutUserID">
            <summary>
            The logged out user id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.LoginAccount">
            <summary>
            The login account. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ObjectAccessControlList">
            <summary>
            Object ACL. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ObjVer">
            <summary>
            Object version identifier. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.PropertyValues">
            <summary>
            Property values. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ValueListItem">
            <summary>
            The value list item. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.Vault">
            <summary>
            The vault object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.VaultSharedVariables">
            <summary>
            Vault shared variables. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.UserAccount">
            <summary>
            User accout object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.UserGroupAdmin">
            <summary>
            User group admin object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.Input">
            <summary>
            The input string. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.CurrentTransactionID">
            <summary>
            Current transaction id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ParentTransactionID">
            <summary>
            Parent transaction id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.MasterTransactionID">
            <summary>
            Master transaction id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ActivityID">
            <summary>
            Activity id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.TransactionCache">
            <summary>
            Transaction cache object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.PropertyDefinition">
            <summary>
            Property definition object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.PropertyValue">
            <summary>
            Property value object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.LastUsed">
            <summary>
            The last used automatic number. Is used only with automatic numbering. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.VaultExtensionMethodName">
            <summary>
            The vault extension method to call.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.#ctor">
            <summary>
            Argumentless constructor required for COM Interop.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetEventHandlerEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a dynamic ScriptEnvironment object to a EventHandlerEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetStateEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a dynamic ScriptEnvironment object to a StateEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetStateTransitionEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a dynamic ScriptEnvironment object to a StateTransitionEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetPropertyEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a dynamic ScriptEnvironment object to a PropertyEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="T:MFiles.VAF.ScriptResult">
            <summary>
            Represents the results of a Compliance Kit handler execution.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ScriptResult.#ctor">
            <summary>
            Argumentless constructor required for COM Interop.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.Error">
            <summary>
            Indicates whether an error has occured.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.ErrorMessage">
            <summary>
            Provides an error message if an error has occured.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.Exception">
            <summary>
            The last exception to occur (if any).
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.VaultExtensionMethodOutput">
            <summary>
            Any output value that was set during the event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.AllowAutomaticStateTransition">
            <summary>
            An output value that tells whether the automatic state transition is allowed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.NextStateID">
            <summary>
            If automatic state transition is allowed then this output value contains the ID of the next state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.ConditionsOK">
            <summary>
            True if the state pre- or post conditions are met.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.ValidationOK">
            <summary>
            True if the propery validation was successfull.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.Message">
            <summary>
            Message that is passed to the scripting engine for MFScriptCancel.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ValidationResultForValidation">
            <summary>
            Class interface for handling validation errors.
            Either by throwing an error or fixing the error.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ValidationResultBase">
            <summary>
            Base class for validation and upgrade-related activity. Receives the notifications from vault metadata element existence.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ObjTypeMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing object type.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="objtype">The object type identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ClassMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="objclass">The class identifier (alias, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ClassWrongObjType(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing class.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="objclass">The class identifier (alias, guid, id).</param>
            <param name="objtype">The requested object type identifier (alias, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ClassGroupMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing class group.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="classGroup">The classgroup identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.UserGroupMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing user group.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="userGroup">The user group identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ViewMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing view.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="view">The view identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.PropertyDefMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing property definition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.PropertyDefWrongObjType(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report property definition that cannot be used with requested object type.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="objtype">Requested object type (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.PropertyDefWrongType(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFDataType[],System.Boolean,System.Boolean)">
            <summary>
            Report property definition that has wrong datatype.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="datatypes">Requested datatypes</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.PropertyDefWrongValueList(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report property definition that has wrong valuelist.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="valuelist">Requested valuelist</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.PropertyAssociationFailure(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.PropertyAssociationNotFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.WorkflowMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing workflow.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="workflow">The workflow identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.StateMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing state.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.StateNotIn(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.StateTransitionMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing transition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the transition (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.StateTransitionNotIn(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state transition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.StateTransitionNotCorrect(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report incorrect state transition from and to details.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="fromState">The from state identifier (alias, guid, id), this or toState can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id), this or fromState can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ValueListMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Report missing value list.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="valuelist">The value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="messageCanBeNull">Additional details to log.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ValueListItemNeedList(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report that we cant find value list item without a list
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ValueListItemMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing value list item.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="valuelist">The container value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.NamedACLMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing NACL.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="nacl">The NACL identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.EmptyValue(MFiles.VAF.Common.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.EmptyValue(MFiles.VAF.Common.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="parentIdentifier">The parent element for the missing element. Helps to identify the actual missing item.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.MarkObjectRef(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Indicates an object reference in the configuration file.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="identifier">The object reference.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ObjTypeFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found object type.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="objtype">The object type identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ClassFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="objclass">The class identifier (alias, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ClassGroupFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found class group.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="classGroup">The classgroup identifier (id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.UserGroupFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found user group.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="userGroup">The classgroup identifier (id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ViewFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found view.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="view">The view identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.PropertyDefFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found property definition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.WorkflowFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found workflow.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="workflow">The workflow identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.StateFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.StateTransitionFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found transition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id) can be empty.</param>
            <param name="fromState">The from state identifier (alias, guid, id) can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ValueListFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found value list.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="valuelist">The value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ValueListItemFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found value list item.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid,id)</param>
            <param name="valuelist">The value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.NamedACLFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found NACL.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="nacl">The NACL identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ReportCustomFailure(MFiles.VAF.Common.IConfiguration,System.String,MFiles.VAF.Common.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="itemType">Custom type identifier string of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ReportCustomFailure(MFiles.VAF.Common.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Common.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="itemType">The metadatastructure item type of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.ReportError(MFiles.VAF.Common.IConfiguration,System.String)">
            <summary>
            Reports the error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="error">The error string.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.MissingItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional.</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.FailedItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean,System.String)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional.</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Custom message.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ValidationResultBase.FoundItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StructureItemName(MFilesAPI.MFMetadataStructureItem)">
            <summary>
            Return string name of metadata type.
            </summary>
            <param name="metadataStructureItem"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.MissingItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.FailedItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.String,System.Nullable{System.Boolean},System.Boolean,System.String)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="type">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Custom message</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.FailedItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean,System.String)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Custom message</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.FoundItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.FoundItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="type">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Pre made log message</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.EmptyValue(MFiles.VAF.Common.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.EmptyValue(MFiles.VAF.Common.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="parentIdentifier">Parent element of the identifier.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.ValueListItemFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found value list item.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="valuelist">The container value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.ValueListItemMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing value list item.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="valuelist">The container value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.ValueListItemNeedList(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report that we cant find value list item without a list
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.PropertyAssociationFailure(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.PropertyAssociationNotFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StateFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id)</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StateMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id)</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StateNotIn(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StateTransitionFound(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found transition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id) can be empty.</param>
            <param name="fromState">The from state identifier (alias, guid, id) can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StateTransitionMissing(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing transition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the transition (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StateTransitionNotIn(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state transition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.StateTransitionNotCorrect(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,MFiles.VAF.Common.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report incorrect state transition from and to details.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="fromState">The from state identifier (alias, guid, id), this or toState can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id), this or fromState can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.ReportCustomFailure(MFiles.VAF.Common.IConfiguration,System.String,MFiles.VAF.Common.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="itemType">Custom type identifier string of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.ReportCustomFailure(MFiles.VAF.Common.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Common.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="itemType">The metadatastructure item type of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.ClearLog">
            <summary>
            Clear old log, and prepare SearchResults.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ValidationResultForValidation.SearchResults">
            <summary>
            Log of all events.
            First key = module, second key = type, third alias.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ValidationResultForValidation.SummaryModule">
            <summary>
            Summary data object for each Configuration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.SummaryModule.Name">
            <summary>
            Name of the module.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.SummaryModule.ConfigKey">
            <summary>
            ConfigKey of the module.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.SummaryModule.Enabled">
            <summary>
            Configuration is enabled.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.SummaryModule.Valid">
            <summary>
            Validation is ok.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.SummaryModule.NoConfig">
            <summary>
            Bad case of no configuration.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ValidationResultForValidation.DetailItem">
            <summary>
            Detail item info.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Configuration">
            <summary>
            Name of the configuration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Type">
            <summary>
            Object type string.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Reference">
            <summary>
            Reference name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Error">
            <summary>
            Error state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Missing">
            <summary>
            Missing state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Required">
            <summary>
            Required or optional.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Message">
            <summary>
            Additional message.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.DetailItem.Id">
            <summary>
            Found item id.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.DetailItem.Equals(System.Object)">
            <summary>
            Equality check, needed by duplicate elimination.
            Two items are equal only if all members are equal.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.DetailItem.GetHashCode">
            <summary>
            HashCode override wanted by compiler warning.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ValidationResultForValidation.Results">
            <summary>
            Result object with summary and details.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.Results.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForValidation.Results.AddDetail(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.String,System.Int32)">
            <summary>
            Method to add new detail entry. Ignores duplicates.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.Results.Summary">
            <summary>
            Summary list.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForValidation.Results.Details">
            <summary>
            Details list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ValidationResultForValidation.Results.ErrorModules">
            <summary>
            Names of modules in error state.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ValidationResultForUpgrade">
            <summary>
            Class interface for handling validation errors.
            Either by throwing an error or fixing the error.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForUpgrade.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForUpgrade.MarkObjectRef(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier)">
            <summary>
            Indicates an object reference in the configuration file.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="identifier">The object reference.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForUpgrade.MissingItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.ValidationResultForUpgrade.FoundItemAction(MFiles.VAF.Common.IConfiguration,MFiles.VAF.Common.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="P:MFiles.VAF.ValidationResultForUpgrade.MetadataElements">
            <summary>
            Container for the metadata elements that should be present in the vault after the upgrade. Contains (1) item type, (2) alias and (3) the configuration id that asked the alias.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ValidationResultForUpgrade.MetadataItemParams">
            <summary>
            Data content for validated/requested metadata items.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForUpgrade.MetadataItemParams.itemType">
            <summary>
            The metadata structure item type.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForUpgrade.MetadataItemParams.identifier">
            <summary>
            The identifier for the metadata structure item.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForUpgrade.MetadataItemParams.moduleConfigId">
            <summary>
            The configuration identifier where the metadata structure reference origins from.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForUpgrade.MetadataItemParams.wasMissing">
            <summary>
            True if the metadata structure item was not present in the vault metadata structure.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ValidationResultForUpgrade.MetadataItemParams.optional">
            <summary>
            True if the metadata structure item was specified to be optional.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ApplicationRunningStatus">
            <summary>
            The application running statuses.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Uninitialized">
            <summary>
            Application running status is not set.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Initializing">
            <summary>
            Application is starting.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Running">
            <summary>
            Application is running.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Uninitializing">
            <summary>
            Application is stopping.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IMethodInfoBase">
            <summary>
            IMethodInfoBase is a base interface for method info interface that can be ordered according to the priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IMethodInfoBase.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IMethodInfoBase.Priority">
            <summary>
            The method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IEventHandlerMethodInfo">
            <summary>
            Interface for executing the event handler methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IEventHandlerMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Conditionally executes the event handler method. The event handler is tested against the environment and if the filters allow
            then the event handler is actually executed.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
        </member>
        <member name="T:MFiles.VAF.IVaultExtensionMethodInfo">
            <summary>
            Interface for executing the vault extension methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IVaultExtensionMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Executes the vault extension method.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>The vault extension method return value.</returns>
        </member>
        <member name="T:MFiles.VAF.IStateMethodInfo">
            <summary>
            Interface for executing state action and condition evaluation methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IStateMethodInfo.RunAction(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Executes a state action.
            </summary>
            <param name="environment">The environment parameters.</param>
            /// <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IStateMethodInfo.EvaluatePreConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Evaluates the state pre-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IStateMethodInfo.EvaluatePostConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Executes the state post-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="T:MFiles.VAF.IStateTransitionMethodInfo">
            <summary>
            Interface for executing state action and condition evaluation methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IStateTransitionMethodInfo.EvaluateAutomaticStateTransitionTrigger(MFiles.VAF.Common.StateTransitionEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.Int32@)">
            <summary>
            Evaluates whether an automatic state transition should be triggered.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="allowTransition">Output value for the evaluation result. True means that the transition will be executed.</param>
            <param name="nextState">Output parameter for the next state id.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="T:MFiles.VAF.IPropertyMethodInfo">
            <summary>
            Interface for executing property validation and automatic calculation methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IPropertyMethodInfo.GetAutomaticNumber(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IPropertyMethodInfo.GetCustomValue(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IPropertyMethodInfo.Validate(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Validates the given property value.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="validationResult">Output parameter for the validation result. True if the value was valid.</param>
            <param name="message">Output parameter for the error message if the value was not valid.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="T:MFiles.VAF.EventHandlerMethodInfo">
            <summary>
            EventHandlerMethodInfo encapsulates an event handling method.
            </summary>
        </member>
        <member name="F:MFiles.VAF.EventHandlerMethodInfo.attribute">
            <summary>
            The attributes of an event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.EventHandlerMethodInfo.eventHandlerMethod">
            <summary>
            The event handler method.
            </summary>
        </member>
        <member name="M:MFiles.VAF.EventHandlerMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.EventHandlerAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="methodInfo">The reflected event handler method info.</param>
            <param name="instance">The instance of the class with the method.</param>
            <param name="attribute">The event call attribute to use in the call.</param>
        </member>
        <member name="M:MFiles.VAF.EventHandlerMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Conditionally executes the event handler method.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
        </member>
        <member name="P:MFiles.VAF.EventHandlerMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.EventHandlerMethodInfo.LogString">
            <summary>
            Returns the event handler method info into a string that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.EventHandlerMethodInfo.EventHandlerMethod">
            <summary>
            Delegate declaration for the event handler methods. Invoking the handlers through delegates
            is much faster than invoking from the MethodInfo. 
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultExtensionMethodInfo">
            <summary>
            VaultExtensionMethodInfo encapsulates an vault extension method call.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultExtensionMethodInfo.vaultExtensionMethod">
            <summary>
            The method to call.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultExtensionMethodInfo.requiredVaultAccess">
            <summary>
            The vault access level that is required from the caller to perform this call.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultExtensionMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFilesAPI.MFVaultAccess)">
            <summary>
            Constructor.
            </summary>
            <param name="methodInfo">The reflected event handler method info.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="requiredVaultAccess">The vault access level that is required from the caller to perform this call.</param>
        </member>
        <member name="M:MFiles.VAF.VaultExtensionMethodInfo.#ctor(MFiles.VAF.VaultExtensionMethodInfo.VaultExtensionMethod,System.Object,MFilesAPI.MFVaultAccess)">
            <summary>
            Constructor.
            </summary>
            <param name="method">A readily constructed vault extension method delegate.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="requiredVaultAccess">The vault access level that is required from the caller to perform this call.</param>
        </member>
        <member name="M:MFiles.VAF.VaultExtensionMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Conditionally executes the event handler method.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>The extension method result.</returns>
        </member>
        <member name="P:MFiles.VAF.VaultExtensionMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultExtensionMethodInfo.LogString">
            <summary>
            Returns the vault extension method info into a string that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultExtensionMethodInfo.VaultExtensionMethod">
            <summary>
            Delegate declaration for the event handler methods. Invoking the handlers through delegates
            is much faster than invoking from the MethodInfo. 
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo">
            <summary>
            StateMethodInfo represents a handler method that the VBScript delegates to. It can handle state run actions,
            pre- and postconditions and automatic state transitions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.runActionMethod">
            <summary>
            The run action method. This is used when the method type is StateAttribute.AttributeType.StateAction.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.preConditionsMethod">
            <summary>
            The precondition evaluation method. This is used when the method type is StateAttribute.AttributeType.StatePreConditions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.postConditionsMethod">
            <summary>
            The postcondition evaluation method. This is used when the method type is StateAttribute.AttributeType.StatePostConditions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.attribute">
            <summary>
            The attribute instance that was attached to the method declaration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="method">The .NET method info.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="attribute">The state attribute.</param>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.RunAction(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Executes a state action.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.EvaluatePreConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Evaluates the state pre-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.EvaluatePostConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Executes the state post-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="P:MFiles.VAF.StateMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.StateMethodInfo.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo.RunActionMethod">
            <summary>
            Run action method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo.PreConditionsMethod">
            <summary>
            State postconditions evaluation method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo.PostConditionsMethod">
            <summary>
            State preconditions evaluation method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateTransitionMethodInfo">
            <summary>
            StateTransitionMethodInfo represents a handler method that the VBScript delegates to. It can evaluate the automatic state transition triggers.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateTransitionMethodInfo.automaticStateTransitionConditionsMethod">
            <summary>
            The automatic state transition conditions evaluation method. This is used when the method type is StateAttribute.AttributeType.AutomaticStateTransitionTrigger.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateTransitionMethodInfo.attribute">
            <summary>
            The attribute instance that was attached to the method declaration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.StateTransitionMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateTransitionAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="method">The .NET method info.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="attribute">The state attribute.</param>
        </member>
        <member name="M:MFiles.VAF.StateTransitionMethodInfo.EvaluateAutomaticStateTransitionTrigger(MFiles.VAF.Common.StateTransitionEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.Int32@)">
            <summary>
            Evaluates whether an automatic state transition should be triggered.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="allowTransition">Output value for the evaluation result. True means that the transition will be executed.</param>
            <param name="nextState">Output parameter for the next state id.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="P:MFiles.VAF.StateTransitionMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.StateTransitionMethodInfo.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateTransitionMethodInfo.AutomaticStateTransitionTriggerMethod">
            <summary>
            State automatic state transition conditions evaluation method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo">
            <summary>
            PropertyMethodInfo represents a handler method that the VBScript delegates to. It can handle property value validation,
            customized automatic numbering and custom value calculation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.automaticNumberingMethod">
            <summary>
            The custom value calculation method. This is used when the method type is PropertyAttribute.AttributeType.PropertyAutomaticNumbering.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.customValueMethod">
            <summary>
            The customized automatic numbering method. This is used when the method type is PropertyAttribute.AttributeType.PropertyCustomValue.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.validationMethod">
            <summary>
            The property value validation method. This is used when the method type is PropertyAttribute.AttributeType.PropertyValueValidation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.attribute">
            <summary>
            The attribute instance that was attached to the method declaration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.PropertyAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="method">The .NET method info.</param>
            <param name="instance">The host object that contains the given method.</param>
            <param name="attribute">The property attribute.</param>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.GetAutomaticNumber(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.GetCustomValue(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.Validate(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Validates the given property value.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="validationResult">Output parameter for the validation result. True if the value was valid.</param>
            <param name="message">Output parameter for the error message if the value was not valid.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="P:MFiles.VAF.PropertyMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.PropertyMethodInfo.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo.AutomaticNumberingMethod">
            <summary>
            The customized automatic numbering method delegate. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo.CustomValueMethod">
            <summary>
            The custom value calculation method delegate. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo.ValidationMethod">
            <summary>
            The property value validation method delegate. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.BasicModule">
            <summary>
            Abstract base class for Configuration implementations.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.IModule">
            <summary>
            Common interface for all modules.
            Use abstract GenericModule class to get suitable implementation to all but LoadConfiguration().
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.GetConfigKey">
            <summary>
            Resolves the default configuration key for configurations of this module.
            </summary>
            <returns>The default configuration key.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.GetModuleName">
            <summary>
            Returns the module name for UI.
            </summary>
            <returns>The module name string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.GetModuleDescription">
            <summary>
            Returns the module description.
            </summary>
            <returns>The module description string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.LoadConfiguration(MFilesAPI.Vault)">
            <summary>
            LoadConfiguration loads the configuration of the owner module from the vault.
            </summary>
            <param name="vault">The document vault.</param>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.UnloadConfiguration">
            <summary>
            Removes the configuration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.ValidateConfigurationSyntax(System.String)">
            <summary>
            Validates the configuration data syntax without touching running configuration.
            </summary>
            <param name="configurationData">The serialized configurationd data.</param>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.ValidateConfiguration(MFilesAPI.Vault,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Method to Validate the modules configuration in this vault.
            Updates the configurations IsValid.
            </summary>
            <param name="vault">The vault.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Initialize(MFilesAPI.Vault)">
            <summary>
            Used for module initialization that may include dependencies on other modules.
            It is automatically called by the Configuration Manager after all modules are loaded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Start">
            <summary>
            Used for indicating the module start. It is automatically called by the Configuration Manager after all modules are initialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Stop">
            <summary>
            Used for indicating the module stop. It is automatically called by the Configuration Manager for all modules before are initialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Uninitialize">
            <summary>
            Used for indicating the module uninitialization. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.ModuleManager">
            <summary>
            Access to the module manager that initializes the instance.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.Configuration">
            <summary>
            Access to module's configuration object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.ConfigurationRequired">
            <summary>
            Specifies whether the module requires configuration or not.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.AssemblyName">
            <summary>
            Name of the assembly from where the module is loaded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetMethodsByAttribute``1(System.Boolean)">
            <summary>
            Returns a collection of the methods decorated with the given attribute that the module contains.
            </summary>
            <param name="unused">True to return unused handlers, false to return current used handlers.</param>
            <returns>A collection of methods or an empty collection if the module is not enabled.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetConfigKey">
            <summary>
            Resolves the default configuration key for configurations of this module.
            </summary>
            <returns>The default configuration key.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetModuleName">
            <summary>
            Returns the module name for UI.
            </summary>
            <returns>The module name string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetModuleDescription">
            <summary>
            Returns the module description.
            </summary>
            <returns>The module description string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.LoadConfiguration(MFilesAPI.Vault)">
            <summary>
            Actual module needs to have its own LoadConfiguration.
            </summary>
            <param name="vault">The document vault.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.UnloadConfiguration">
            <summary>
            Removes the configuration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.ValidateConfigurationSyntax(System.String)">
            <summary>
            Validates the configuration data syntax without touching running configuration.
            </summary>
            <param name="configurationData">The serialized configurationd data.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.ValidateConfiguration(MFilesAPI.Vault,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Method to validate the configuration in this vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Initialize(MFilesAPI.Vault)">
            <summary>
            Used for module initialization that may include dependencies on other modules.
            It is automatically called by the Configuration Manager after all modules are loaded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Start">
            <summary>
            Used for module start that may include dependencies on other modules.
            It is automatically called by the Configuration Manager after all modules are initialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Stop">
            <summary>
            Used for indicating the module stop.
            It is automatically called by the Configuration Manager for all modules before they are uninitialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Uninitialize">
            <summary>
            Used for indicating the module uninitialization. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.MoveConfigurationNamespace(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Move configuration content from under old namespace to new namespace.
            </summary>
            <param name="vault">The vault.</param>
            <param name="oldspace">Old namespace from where to take.</param>
            <param name="newspace">New namespace where to place.</param>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.ModuleManager">
            <summary>
            Accesspoint to Configuration Manager.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.AssemblyName">
            <summary>
            Name of the assembly from where the module is loaded.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.Configuration">
            <summary>
            Access to specific configuration object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.ConfigurationRequired">
            <summary>
            Specifies whether the module requires configuration or not.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.BasicModuleConfiguration">
            <summary>
            BasicModuleConfiguration is a base class for the module configuration classes. It provides implementations for configuration loading and parsing.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.IModuleConfiguration">
            <summary>
            Interface for the Configuration of the Modules.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleConfiguration.SetValidity(System.Boolean)">
            <summary>
            Set the configuration object either valid or invalid.
            </summary>
            <param name="isValid">The configuration validity.</param>
        </member>
        <member name="P:MFiles.VAF.Module.IModuleConfiguration.Enabled">
            <summary>
            Is the module that owns this configuration enabled or not.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.Valid">
            <summary>
            Method for resolving if the configuration is valid.
            </summary>
            <returns>True if the configuration is valid.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.SetValidity(System.Boolean)">
            <summary>
            Set the configuration object either valid or invalid.
            </summary>
            <param name="isValid">The configuration validity.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.MarkMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Marks the configuration member as 'defined', i.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is marked as defined.</param>
            <param name="member">The member indentity.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.IsMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Resolves if a configuration member is defined. I.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is looked.</param>
            <param name="member">The member indentity.</param>
            <returns>Returns true if the member is defined.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.#ctor">
            <summary>
            Constructor. Initializes the module as disabled and the configuration being valid.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Module.BasicModuleConfiguration.definedMembers">
            <summary>
            Set of configuration members that have been defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModuleConfiguration.ConfigurationId">
            <summary>
            Returns the module identification.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModuleConfiguration.Enabled">
            <summary>
            Is the module that owns this configuration enabled or not.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFEventFilterOptions">
            <summary>
            Flags that allow further filtering of event handler delegation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.None">
            <summary>
            No filtering.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.IgnoreTemplates">
            <summary>
            Filter out template object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.IgnoreRecords">
            <summary>
            Filter out objects that are marked as records.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.Template">
            <summary>
            Accept only objects that are template objects.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.Record">
            <summary>
            Accept only objects that are marked as record objects.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IEventHandlerAttribute">
            <summary>
            Common interface for event handler attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IEventHandlerAttribute.MatchesEnvironment(MFiles.VAF.Common.IEventHandlerEnvironment)">
            <summary>
            MatchesEnvironment is a method that is used in evaluating the calling context against the provided filters.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerAttribute.EventType">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.EventHandlerAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.EventHandlerAttribute.MatchesEnvironment(MFiles.VAF.Common.IEventHandlerEnvironment)">
            <summary>
            MatchesContext checks the event handler attributes against the current event context and determines if the handler should be called.
            </summary>
            <param name="context">The event handler context object.</param>
            <returns>Returns true if the event handler should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.EventHandlerAttribute.#ctor(MFilesAPI.MFEventHandlerType)">
            <summary>
            Creates a new instance of this attribute.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerAttribute.EventType">
            <summary>
            The type of event to which the method is bound.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerAttribute.FilterOptions">
            <summary>
            Addtional options to further filter the type of 
            objects/events to which the method is bound. 
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.VaultExtensionMethodAttribute">
            <summary>
            The attribute class for extension method implementations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.VaultExtensionMethodAttribute.MatchesEnvironment(MFiles.VAF.Common.IEventHandlerEnvironment)">
            <summary>
            MatchesEnvironment checks the event handler attributes against the current event environment and determines if the handler should be called.
            </summary>
            <param name="context">The event handler environment object.</param>
            <returns>Returns true if the event handler at hand should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.VaultExtensionMethodAttribute.#ctor(System.String)">
            <summary>
            Contructor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultExtensionMethodAttribute.Filter">
            <summary>
            Filter for matching the vault extension method handlers.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultExtensionMethodAttribute.EventType">
            <summary>
            The event handler type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultExtensionMethodAttribute.RequiredVaultAccess">
            <summary>
            The vault access that is required to perform the call.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IEventHandlerEnvironment">
            <summary>
            The event hander 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.EventType">
            <summary>
            The current event type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.InputParams">
            <summary>
            Input parameters for the event. Set with extension method events only.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.IsObjectEvent">
            <summary>
            Indicates if the event is associated with an object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.IsRecordObject">
            <summary>
            Identifies if the associated object is a record object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.IsTemplateObject">
            <summary>
            Identifies if the associated object is a template object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.EventHandlerEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.inputParams">
            <summary>
            Input parameters for extension methods.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.fileVerLocalClone">
            <summary>
            Local file version identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.loginAccountLocalClone">
            <summary>
            Local login account object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.objectAccessControlListLocalClone">
            <summary>
            Local ACL object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.propertyValuesLocalClone">
            <summary>
            Local property values object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.valueListItemLocalClone">
            <summary>
            Local value list item object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.userAccountLocalClone">
            <summary>
            Local user account object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.userGroupAdminLocalClone">
            <summary>
            Local user group admin object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.FileVerExternal">
            <summary>
            Original file version object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.LoginAccountExternal">
            <summary>
            Original login account object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ObjectAccessControlListExternal">
            <summary>
            Original ACL object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.PropertyValuesExternal">
            <summary>
            Original property values object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ValueListItemExternal">
            <summary>
            Original value list item object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserAccountExternal">
            <summary>
            Original user account object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserGroupAdminExternal">
            <summary>
            Original user group admin object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.Type">
            <summary>
            The event type for which this event handler environment was built.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.FileTransferSessionID">
            <summary>
            The file transfer session id. Available only for file transfer related events.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.LoggedOutUserID">
            <summary>
            The user id for logged out user. Available only for logout event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.VaultExtensionMethodName">
            <summary>
            The vault extension method to call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.Input">
            <summary>
            The input string for vault extension method.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.FileVer">
            <summary>
            Accessor for the file version. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.LoginAccount">
            <summary>
            Accessor for the login account. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ObjectAccessControlList">
            <summary>
            Accessor for the ACL object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ValueListItem">
            <summary>
            Accessor for the value list item object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserAccount">
            <summary>
            Accessor for the user account object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserGroupAdmin">
            <summary>
            Accessor for the user group admin object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.InputParams">
            <summary>
            An array of input parameters passed. (Assumes they were in JSON array format)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.EventType">
            <summary>
            Accessor for the event type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.IsObjectEvent">
            <summary>
            Resolves if the event is object version specific event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.IsRecordObject">
            <summary>
            Resolves if the event target is a record object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.IsTemplateObject">
            <summary>
            Resolves if the event target is a template object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleConfigurationValidation.ValidateModules(MFilesAPI.Vault,System.Collections.Generic.List{MFiles.VAF.Module.IModule},MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Perform the validation on list of modules.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="modules">List of modules which to validate.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="T:MFiles.VAF.Common.MFilesApiExtensionMethods">
            <summary>
            Includes extension methods various M-Files API objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.AccessControlList)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.FileVer)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.LoginAccount)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.ObjVer)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.PropertyValues)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.TypedValue)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.UserAccount)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.UserGroupAdmin)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.ValueListItem)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.PropertyDef)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.PropertyValue)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.SessionInfo)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="T:MFiles.VAF.Module.ModuleConfigurationValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.ModuleConfigurationValidator.ValidateModules(MFilesAPI.Vault,System.Collections.Generic.List{MFiles.VAF.Module.IModule},MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Perform the validation on list of modules.
            </summary>
            <param name="vault">The active vault</param>
            <param name="modules">List of modules which to validate.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="T:MFiles.VAF.Common.IPropertyAttribute">
            <summary>
            Common interface for event handler attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IPropertyAttribute.MatchesEnvironment(MFiles.VAF.Common.IPropertyEnvironment)">
            <summary>
            Common interface for property handler attributes.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAttribute.MatchesEnvironment(MFiles.VAF.Common.IPropertyEnvironment)">
            <summary>
            MatchesEnvironment checks the event handler attributes against the current context and determines if the handler should be called.
            </summary>
            <param name="context">The event handler context object.</param>
            <returns>Returns true if the event handler should be called.</returns>	
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAttribute.#ctor(System.String,MFiles.VAF.Common.PropertyAttribute.AttributeType)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the handler method decorated with this attribute should be attached to.</param>
            <param name="type">The type of the property handler attribute.</param>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyAttribute.Type">
            <summary>
            The property attribute type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyAttribute.PropertyDefinition">
            <summary>
            The property definition alias where the method containing this attribute should be attached.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyAttribute.AttributeType">
            <summary>
            The property attribute type enumeration.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueValidationAttribute">
            <summary>
            Attribute for marking the property value validation handler methods.
            Handler signature: delegate bool ValidationMethod( PropertyEnvironment environment, out string message )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueValidationAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the property value validation handler method should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyAutomaticNumberingAttribute">
            <summary>
            Attribute for marking the customized automatic numbering handler methods.
            Handler signature: delegate TypedValue ValidationMethod( PropertyEnvironment environment )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAutomaticNumberingAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the customized automatic numbering handler method should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyCustomValueAttribute">
            <summary>
            Attribute for marking the custom value calculation handler methods.
            Handler signature: delegate TypedValue CustomValueMethod( PropertyEnvironment environment )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyCustomValueAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the custom value calculation handler method should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.IPropertyEnvironment">
            <summary>
            The property execution environment.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IPropertyEnvironment.LastUsed">
            <summary>
            The last used property number. Is defined only in customized automatic numbering.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IPropertyEnvironment.PropertyDefinition">
            <summary>
            The property definition in which context the execution is.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IPropertyEnvironment.PropertyValue">
            <summary>
            The property value handled to the execution.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyEnvironment.propertyDefinitionLocalClone">
            <summary>
            Local property definition object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyEnvironment.propertyValueLocalClone">
            <summary>
            Local property value object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyEnvironment.lastUsedLocalClone">
            <summary>
            Local typed value object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyDefinitionExternal">
            <summary>
            Original property definition object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyValueExternal">
            <summary>
            Original property value object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.LastUsedExternal">
            <summary>
            Original typed value object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyDefinition">
            <summary>
            The property definition in which context the execution is.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyValue">
            <summary>
            The property value handled to the execution.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.LastUsed">
            <summary>
            The typed value handled to the execution.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IStateAttribute">
            <summary>
            Common interface for state handlers attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IStateAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateEnvironment)">
            <summary>
            MatchesEnvironment is a method that is used in evaluating the calling context against the provided filters.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.StateAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StateAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateEnvironment)">
            <summary>
            MatchesEnvironment checks the method filters against the current event context and determines if the handler should be called.
            </summary>
            <param name="context">The state context object.</param>
            <returns>Returns true if the handler method should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StateAttribute.#ctor(System.String,MFiles.VAF.Common.StateAttribute.AttributeType)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the handler method decorated with this attribute should be attached to.</param>
            <param name="type">The attribute type.</param>
        </member>
        <member name="P:MFiles.VAF.Common.StateAttribute.Type">
            <summary>
            The state attribute type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateAttribute.State">
            <summary>
            The property definition alias where the method containing this attribute should be attached.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateAttribute.AttributeType">
            <summary>
            The state attribute type enumeration.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateActionAttribute">
            <summary>
            Attribute for marking the state run action handlers.
            Handler signature: delegate void RunActionMethod( StateEnvironment environment )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StateActionAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the run action handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.StatePreConditionsAttribute">
            <summary>
            Attribute for marking the state precondition evaluation handlers.
            Handler signature: delegate bool PreConditionsMethod( StateEnvironment environment, out string message )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StatePreConditionsAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the preconditions evaluation handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.StatePostConditionsAttribute">
            <summary>
            Attribute for marking the state postcondition evaluation handlers.
            Handler signature: delegate bool PostConditionsMethod( StateEnvironment environment, out string message )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StatePostConditionsAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the postconditions evaluation handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.IStateEnvironment">
            <summary>
            The state execution environment.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateEnvironment.StateID">
            <summary>
            The current state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.Common.StateEnvironment.propertyValuesLocalClone">
            <summary>
            Local property values object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.PropertyValuesExternal">
            <summary>
            Original property values object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.StateID">
            <summary>
            The id of the state that acts as an execution context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.TextResources">
            <summary>
            A class for localizable resource strings.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.TextResources.Validation">
            <summary>
            Collection of strings used in User interface.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFAssociatedPropertyAttribute">
            <summary>
            Associated Property Definition.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFPropertyDefAttribute">
            <summary>
            Property Definition.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.VaultElementReferenceAttribute">
            <summary>
            Base interface of validation attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.VaultElementReferenceAttribute.#ctor">
            <summary>
            Constructor with default values.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.VaultElementReferenceAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.VaultElementReferenceAttribute.GetIdentifier(MFilesAPI.Vault,System.Object)">
            <summary>
            Return resolved reference for the object.
            </summary>
            <param name="vault">The Vault.</param>
            <param name="reference">Reference to object of validation</param>
        </member>
        <member name="M:MFiles.VAF.Common.VaultElementReferenceAttribute.Resolve(MFilesAPI.Vault,System.Type,System.Object)">
            <summary>
            Try to resolve reference into otype without throwing error. Return identifier, -1 on error.
            </summary>
            <param name="vault">Vault in which to operate.</param>
            <param name="otype">Type searched.</param>
            <param name="reference">ID, GUID or alias.</param>
            <returns>ID integer</returns>
        </member>
        <member name="M:MFiles.VAF.Common.VaultElementReferenceAttribute.GetRefValue(System.Object)">
            <summary>
            Return value of given reference, handling few special cases.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultElementReferenceAttribute.Required">
            <summary>
            Is the reference absolute requirement, default is true.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultElementReferenceAttribute.Validate">
            <summary>
            Should the reference be validated. Default is true.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultElementReferenceAttribute.AllowEmpty">
            <summary>
            Is it allowed for this item to be unset, empty or null. Default is false.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultElementReferenceAttribute.AttributeType">
            <summary>
            Type of the target, used in id resolving.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultElementReferenceAttribute.IsValidFailed">
            <summary>
            Return failed IsValid value depending on whether we were required or not.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultElementReferenceAttribute.RefMember">
            <summary>
            Name of the class member containing the reference alias/guid/id of the type.
            Has a default value. If object with the attribute is not class, this value is ignored.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.VaultElementReferenceAttribute.ObjectWithAttribute">
            <summary>
            Structure with object and custom validation attribute.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.VaultElementReferenceAttribute.ObjectWithAttribute.obj">
            <summary>
            Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.VaultElementReferenceAttribute.ObjectWithAttribute.attrib">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFPropertyDefAttribute.Datatypes">
            <summary>
            Optional array of DataTypes the property needs to be one of.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyDefAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyDefAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyDefAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyDefAttribute.ValueList">
            <summary>
            Optional reference (ID, GUID, alias) to the ValueList (or object type) which SSLU or MSLU must refer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyDefAttribute.ObjectType">
            <summary>
            Optional reference (ID, GUID, alias) to the object type this property must be able to be assigned to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyDefAttribute.ObjectTypeMember">
            <summary>
            Alternative for ObjectType=, used only with class type objects.
            Name of the class member containing the reference value of ObjectType.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFAssociatedPropertyAttribute.ValueRequired">
            <summary>
            Is property required property of the class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFAssociatedPropertyAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFAssociatedPropertyAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFAssociatedPropertyAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFAssociatedPropertyAttribute.Class">
            <summary>
            Reference (ID, GUID, alias) to the class type this property must be associated to.
            Not needed if nested under MFClass object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState">
            <summary>
            Tristate value of the associations ValueRequired
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState.Yes">
            <summary>
            Must be Required.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState.No">
            <summary>
            Must not be Required 
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFAssociatedPropertyAttribute.RequiredState.Any">
            <summary>
            Can be required or not.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFClassAttribute">
            <summary>
            Class object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFClassAttribute.ObjectType">
            <summary>
            Object type reference this class should be able to be assigned to.
            Can be set manually if the objecttype is not available as member of this class object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFClassAttribute.AssociatedProperties">
            <summary>
            PropertyDef references this class should be associated with, with Required flag false.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFClassAttribute.RequiredAssociatedProperties">
            <summary>
            PropertyDef references this class should be associated with, with Required flag true.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFClassAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFClassAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFClassGroupAttribute">
            <summary>
            ClassGroup object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFClassGroupAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFClassGroupAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFDeprecatedAttribute">
            <summary>
            Attribute that specifies if a configuration key is deprecated.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFDeprecatedAttribute.#ctor">
            <summary>
            Construtor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFDeprecatedAttribute.#ctor(System.Boolean)">
            <summary>
            Construtor.
            </summary>
            <param name="isError">True if the use of the configuration key should be an error and prevent the use of the configuration.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFDeprecatedAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Construtor.
            </summary>
            <param name="message">The error message to use if the configuration contains a value for this key.</param>
            <param name="isError">True if the use of the configuration key should be an error and prevent the use of the module.</param>
        </member>
        <member name="P:MFiles.VAF.Common.MFDeprecatedAttribute.IsError">
            <summary>
            True if the use of the configuration key should be an error and prevent the use of the configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFDeprecatedAttribute.Message">
            <summary>
            The error message about deprecated key.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFDeprecatedAttribute.Replacement">
            <summary>
            The name of the replacement configuration member.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFNamedACLAttribute">
            <summary>
            Named Access Control List.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFNamedACLAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFNamedACLAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFNamedACLAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFObjectAttribute">
            <summary>
            M-Files Object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFObjectAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFObjectAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFObjectAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFObjTypeAttribute">
            <summary>
            Object Type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFObjTypeAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFObjTypeAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFSkipAttribute">
            <summary>
            Attribute noting that this object should not be traversed while validation.
            As Validation reads the value of object, this might cause problems in some cases, and this Attribute can be used to "fix" problem easy.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFSkipAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFStateAttribute">
            <summary>
            Workflow State.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFStateAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFStateAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFStateAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>		/// 
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFStateAttribute.Workflow">
            <summary>
            Reference to Workflow this state belongs to.
            Can be set manually if the object is not already hierarchially a member of the MFWorkflow object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFStateTransitionAttribute">
            <summary>
            Workflow State Transition.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFStateTransitionAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFStateTransitionAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFStateTransitionAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>		/// 
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFStateTransitionAttribute.Workflow">
            <summary>
            Reference to Workflow this transition belongs to.
            Can be set manually if the object is not already hierarchially a member of the MFWorkflow object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFStateTransitionAttribute.FromState">
            <summary>
            Reference to the From state. Workflow must be known for this to be validated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFStateTransitionAttribute.ToState">
            <summary>
            Reference to the To state. Workflow must be known for this to be validated.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFUserGroupAttribute">
            <summary>
            UserGroup object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFUserGroupAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFUserGroupAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFValueListAttribute">
            <summary>
            ValueList.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFValueListAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFValueListAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFValueListAttribute.Items">
            <summary>
            Optional references to value list items of the value list.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFValueListItemAttribute">
            <summary>
            ValueList Item.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFValueListItemAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFValueListItemAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation result that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFValueListItemAttribute.ValueList">
            <summary>
            Reference to valuelist this item belongs to.
            Not needed when nested under MFValueList.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFViewAttribute">
            <summary>
            View object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFViewAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFViewAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFWorkflowAttribute">
            <summary>
            Workflow.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFWorkflowAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFWorkflowAttribute.IsValid(MFilesAPI.Vault,MFiles.VAF.Common.IConfiguration,System.Object,System.Object,MFiles.VAF.Common.ValidationResultBase)">
            <summary>
            Check the validity of Workflow reference and its states in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFWorkflowAttribute.States">
            <summary>
            Reference to states of the workflow.
            Can be set manually, if not available as members of this class with MFState.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ValidationInterruptedException">
            <summary>
            Exception that marks that the validation of an class hierarchy has been interrupted. This shouldn't be handled as an error.
            </summary>
        </member>
        <member name="T:MFiles.VAF.VersionInfo">
            <summary>
            Version details.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.MAJOR_VERSION">
            <summary>
            The major version. Do not change this manually.
            </summary> 
        </member>
        <member name="F:MFiles.VAF.VersionInfo.MINOR_VERSION">
            <summary>
            The minor version. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.BUILD_NUMBER">
            <summary>
            Build number. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.PATCH_NUMBER">
            <summary>
            Patch number. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.VERSION_STRING">
            <summary>
            The version string. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.VERSION_STRING_WITH_UNDERSCORES">
            <summary>
            The version string. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.COMMENTS">
            <summary>
            Comments for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.COMPANY_NAME">
            <summary>
            Company for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.LEGAL_COPYRIGHT">
            <summary>
            Copyright for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.LEGAL_TRADEMARKS">
            <summary>
            Trademark for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.PRIVATE_BUILD">
            <summary>
            Private build identifier for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.PRODUCT_NAME">
            <summary>
            Product name for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.SPECIAL_BUILD">
            <summary>
            Special build identifier for the assembly resource.
            </summary>
        </member>
    </members>
</doc>
